{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":32,\"max\":32},\"skills\":{\"hacking\":243,\"strength\":225,\"defense\":225,\"dexterity\":225,\"agility\":225,\"charisma\":298,\"intelligence\":0},\"exp\":{\"hacking\":197039.59789770874,\"strength\":125426.65431295225,\"defense\":125426.65431295225,\"dexterity\":125426.65431295225,\"agility\":125426.65431295225,\"charisma\":117529.84635391455,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.28128,\"hacking_speed\":1.28128,\"hacking_money\":1.28128,\"hacking_grow\":1.28128,\"hacking\":1.28128,\"strength\":1.28128,\"defense\":1.28128,\"dexterity\":1.28128,\"agility\":1.28128,\"charisma\":1.715890176,\"hacking_exp\":1.28128,\"strength_exp\":1.28128,\"defense_exp\":1.28128,\"dexterity_exp\":1.28128,\"agility_exp\":1.28128,\"charisma_exp\":1.28128,\"company_rep\":1.28128,\"faction_rep\":1.28128,\"crime_money\":1.5887871999999998,\"crime_success\":1.5887871999999998,\"hacknet_node_money\":1.28128,\"hacknet_node_purchase_cost\":0.7192799999999999,\"hacknet_node_ram_cost\":0.7192799999999999,\"hacknet_node_core_cost\":0.7192799999999999,\"hacknet_node_level_cost\":0.7192799999999999,\"work_money\":1.3837823999999999,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Aevum\",\"bitNodeN\":4,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"Sector-12\",\"Slum Snakes\",\"CyberSec\"],\"factionInvitations\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":50,\"moneyGainRatePerSecond\":4.8048,\"onlineTimeSeconds\":184372.00000002378,\"ram\":1,\"totalMoneyGenerated\":885672.7623745119,\"name\":\"hacknet-node-0\"}}],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{\"Joe's Guns\":\"Employee\"},\"karma\":-1024.9250000000018,\"numPeopleKilled\":0,\"location\":\"Travel Agency\",\"money\":6059155.7437102515,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":46260399.14496017,\"gang\":0,\"hacking\":1111713.8762217965,\"hacknet\":885672.7623745119,\"hacknet_expenses\":-55264.82996638831,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":6058114.743710244,\"work\":451.1684136960009,\"servers\":-41944857.378291726,\"other\":-200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":46260399.14496017,\"gang\":0,\"hacking\":1111713.8762217965,\"hacknet\":885672.7623745119,\"hacknet_expenses\":-55264.82996638831,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":6058114.743710244,\"work\":451.1684136960009,\"servers\":-41944857.378291726,\"other\":-200000,\"augmentations\":0}},\"playtimeSinceLastAug\":201882600,\"playtimeSinceLastBitnode\":201882600,\"purchasedServers\":[],\"scriptProdSinceLastAug\":222281,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":1,\"n\":2},{\"lvl\":1,\"n\":3}],\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1645223836409},{\"ID\":\"TOR\",\"unlockedOn\":1645230256415},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1645231276405},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1645267702014},{\"ID\":\"NS2\",\"unlockedOn\":1645269382011},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1645272022025},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1645272862013},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1645284927988},{\"ID\":\"WORKOUT\",\"unlockedOn\":1645288347993},{\"ID\":\"TRAVEL\",\"unlockedOn\":1645289667984},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1645307137326},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1645308157323},{\"ID\":\"NITESEC\",\"unlockedOn\":1645314397345},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1645355075500},{\"ID\":\"FROZE\",\"unlockedOn\":1645363433486},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1645386005886},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1645396925907},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1674943273146},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1674944533137},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1674944533142},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1674944533146},{\"ID\":\"4S\",\"unlockedOn\":1674947293165},{\"ID\":\"DONATION\",\"unlockedOn\":1674955213151},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1675006796014},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1675013636009},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1675014656007},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1677010425989},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1677010786013},{\"ID\":\"SF1.1\",\"unlockedOn\":1677345004109},{\"ID\":\"GANG\",\"unlockedOn\":1677349826060},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1677413865402},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1677527567973},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1677539500932},{\"ID\":\"INSTALL_100\",\"unlockedOn\":1677587354195},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1677590301779},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1677590361810},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1677590421803},{\"ID\":\"SF2.1\",\"unlockedOn\":1677619262574},{\"ID\":\"N00DLES\",\"unlockedOn\":1677702564963},{\"ID\":\"CORPORATION\",\"unlockedOn\":1678465722123},{\"ID\":\"SF3.1\",\"unlockedOn\":1679068099636}],\"terminalCommandHistory\":[\"backdoor\",\"scan-analyze 10\",\"home\",\"scan-analyze 10\",\"backdoor\",\"home\",\"ls\",\"run fl1ght.exe\",\"analyze-res\",\"deploy\",\"karma\",\"deploy\",\"buy -a\",\"scan-analyze 10\",\"backdoor\",\"scan-analyze 10\",\"backdoor\",\"scan-analyze 10\",\"backdoor\",\"home\",\"scan-analyze 10\",\"backdoor\",\"home\",\"analyze-res\",\"analyze\",\"backdoor\",\"run scripts/managers/AccessManager.js\",\"analyze-tgt\",\"run scripts/managers/HackingManager.js n00dles\",\"run scripts/managers/HackingManager.js foodnstuff\",\"karma\",\"ls\",\"managers\",\"run test.js\",\"scan-analyze 3\",\"connect n00dles\",\"backdoor\",\"connect CSEC\",\"backdoor\",\"home\",\"run test.js\",\"services\",\"connect n00dles\",\"connect CSEC\",\"backdoor\",\"home\",\"ls scripts\",\"karma\",\"ls scripts/managers\",\"ls scripts/services\"],\"lastUpdate\":1679269971857,\"lastSave\":1679269969560,\"totalPlaytime\":34047085800,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":914486,\"factionWorkType\":\"field\",\"factionName\":\"Slum Snakes\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"1284b302c27912\",\"hacking\":248,\"max_hp\":10,\"strength\":3,\"defense\":3,\"dexterity\":3,\"agility\":3,\"charisma\":35,\"intelligence\":0,\"hacking_chance_mult\":1.1257421197123603,\"hacking_speed_mult\":1.137649254932861,\"hacking_money_mult\":1.0721353521070098,\"hacking_grow_mult\":1.0721353521070098,\"hacking_exp\":241745.3163724167,\"strength_exp\":31.255693886138218,\"defense_exp\":31.255693886138218,\"dexterity_exp\":31.255693886138218,\"agility_exp\":31.255693886138218,\"charisma_exp\":917.6313202904026,\"intelligence_exp\":0,\"hacking_mult\":1.2647712714968369,\"strength_mult\":1.0721353521070098,\"defense_mult\":1.0721353521070098,\"dexterity_mult\":1.1257421197123603,\"agility_mult\":1.1257421197123603,\"charisma_mult\":1.0721353521070098,\"hacking_exp_mult\":1.1793488873177111,\"strength_exp_mult\":1.1793488873177111,\"defense_exp_mult\":1.1793488873177111,\"dexterity_exp_mult\":1.1793488873177111,\"agility_exp_mult\":1.1793488873177111,\"charisma_exp_mult\":1.1793488873177111,\"company_rep_mult\":1.0721353521070098,\"faction_rep_mult\":1.0721353521070098,\"companyName\":\"Joe's Guns\",\"crime_money_mult\":1.0721353521070098,\"crime_success_mult\":1.0721353521070098,\"isWorking\":true,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"NiteSec\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.17690233309765666,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.29045667251414686,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":852.0677775981238,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":1373.2828954749993,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":1200200,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.0721353521070098,\"hacknet_node_money_mult\":1.4918763424569041,\"hacknet_node_purchase_cost_mult\":0.7130299911488472,\"hacknet_node_ram_cost_mult\":0.9320653479069899,\"hacknet_node_core_cost_mult\":0.9320653479069899,\"hacknet_node_level_cost_mult\":0.7922555457209414,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"66.7.7.7\",\"isConnectedTo\":true,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\"],\"ramUsed\":21.650000000000002,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/managers/AccessManager.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":199173.474,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2691.0099999997437,\"pid\":1,\"ramUsage\":2.55,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///acce653d-ea44-421f-ba10-dde6029bb52b\",\"moduleSequenceNumber\":252},{\"filename\":\"/scripts/managers/Manager.js\",\"url\":\"blob:file:///c6808551-f6b2-4b34-88e3-b94663a1ce05\",\"moduleSequenceNumber\":274},{\"filename\":\"/scripts/managers/AccessManager.js\",\"url\":\"blob:file:///f13cae15-ac37-4610-a526-a4fc2bf8d221\",\"moduleSequenceNumber\":494}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"/scripts/managers/HackingManager.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13901.60537051687,\"offlineMoneyMade\":0,\"offlineRunningTime\":199173.474,\"onlineExpGained\":2068.447180799999,\"onlineMoneyMade\":222281,\"onlineRunningTime\":2655.0099999997765,\"pid\":2,\"ramUsage\":9.55,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///0134fa23-cfb8-46c0-a2fb-61496af73c63\",\"moduleSequenceNumber\":252},{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///df50e1b7-e162-4d21-9772-8e1017aff850\",\"moduleSequenceNumber\":252},{\"filename\":\"/scripts/controllers/HackingOperationController.js\",\"url\":\"blob:file:///e3a66405-d058-49c2-8cfd-3375846b25ee\",\"moduleSequenceNumber\":264},{\"filename\":\"/scripts/controllers/HackController.js\",\"url\":\"blob:file:///6b110500-493a-4238-8fd2-ca17d5b5d56d\",\"moduleSequenceNumber\":267},{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///4e0feeac-656d-49f8-b0c3-c60438faaafb\",\"moduleSequenceNumber\":252},{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///be2ebc6d-30b3-4ca9-b39e-51d800bfb2c1\",\"moduleSequenceNumber\":252},{\"filename\":\"/scripts/controllers/HackingOperationController.js\",\"url\":\"blob:file:///225be2e4-e860-4ae4-baf9-1680bfa20e88\",\"moduleSequenceNumber\":264},{\"filename\":\"/scripts/controllers/GrowController.js\",\"url\":\"blob:file:///8babb205-8e83-4371-97bf-cf07bee115c0\",\"moduleSequenceNumber\":266},{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///b473cd9a-574c-4884-8d7a-2349ae342862\",\"moduleSequenceNumber\":252},{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///9525bd7b-9f50-4ebd-b985-53257cd77d67\",\"moduleSequenceNumber\":252},{\"filename\":\"/scripts/controllers/HackingOperationController.js\",\"url\":\"blob:file:///dce3e25d-5b09-4afa-9941-9ad0669e3a0a\",\"moduleSequenceNumber\":264},{\"filename\":\"/scripts/controllers/WeakenController.js\",\"url\":\"blob:file:///0fd0882e-c86a-4cf2-8063-340544e39bbb\",\"moduleSequenceNumber\":265},{\"filename\":\"/scripts/managers/Manager.js\",\"url\":\"blob:file:///7e93001f-1556-47ed-b026-562ddf52c0ed\",\"moduleSequenceNumber\":274},{\"filename\":\"/scripts/managers/HackingManager.js\",\"url\":\"blob:file:///cae581e4-64b4-4c06-9ed5-881efca26529\",\"moduleSequenceNumber\":499}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"/scripts/managers/HackingManager.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":55332.42663919633,\"offlineMoneyMade\":0,\"offlineRunningTime\":199173.474,\"onlineExpGained\":8108.9648640000105,\"onlineMoneyMade\":0,\"onlineRunningTime\":2381.0100000000257,\"pid\":3,\"ramUsage\":9.55,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///410aa9ec-569c-4a8e-ba43-23aad2c0a8f6\",\"moduleSequenceNumber\":1915},{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///3dc9c373-8600-4373-89bc-821a23a094c1\",\"moduleSequenceNumber\":1915},{\"filename\":\"/scripts/controllers/HackingOperationController.js\",\"url\":\"blob:file:///cec07157-34be-49a8-834d-7e7444965a3f\",\"moduleSequenceNumber\":1927},{\"filename\":\"/scripts/controllers/HackController.js\",\"url\":\"blob:file:///18404708-84ec-425d-86b4-494464ac5e63\",\"moduleSequenceNumber\":1930},{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///7d6c1669-bae1-4e5e-b3db-96f259eea437\",\"moduleSequenceNumber\":1915},{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///e983d0c0-18ee-4ee6-90bd-1dce8ccf2f00\",\"moduleSequenceNumber\":1915},{\"filename\":\"/scripts/controllers/HackingOperationController.js\",\"url\":\"blob:file:///d773d7bf-23a8-420c-99dd-a6954add412c\",\"moduleSequenceNumber\":1927},{\"filename\":\"/scripts/controllers/GrowController.js\",\"url\":\"blob:file:///ea15a0f9-52a4-40c2-a377-66be62e56b67\",\"moduleSequenceNumber\":1929},{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///4f951329-bb27-4595-9b73-01c6a733ee29\",\"moduleSequenceNumber\":1915},{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///679de8e2-66fc-44c4-b864-868afc85f68b\",\"moduleSequenceNumber\":1915},{\"filename\":\"/scripts/controllers/HackingOperationController.js\",\"url\":\"blob:file:///4d6cb5b4-286d-42c1-a3e7-872e3571b7d9\",\"moduleSequenceNumber\":1927},{\"filename\":\"/scripts/controllers/WeakenController.js\",\"url\":\"blob:file:///f6ca3cec-735c-4ca9-8402-347b1f2514b9\",\"moduleSequenceNumber\":1928},{\"filename\":\"/scripts/managers/Manager.js\",\"url\":\"blob:file:///47d28da5-1876-454e-bf31-a91f04509ac3\",\"moduleSequenceNumber\":1937},{\"filename\":\"/scripts/managers/HackingManager.js\",\"url\":\"blob:file:///00001c1d-25e5-449a-8b46-94dfe085d1b4\",\"moduleSequenceNumber\":1954}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**@param {NS} ns**/\\n\\nexport async function main(ns)\\n{\\n    var serverName = ns.args[0];\\n\\n    var securityThreshold = ns.getServerMinSecurityLevel(serverName) + 5;\\n\\n    var moneyThreshold = ns.getServerMaxMoney(serverName) * 0.75;\\n\\n    while (true)\\n    {\\n        if (ns.getServerSecurityLevel(serverName) > securityThreshold)\\n        {\\n            await ns.weaken(serverName);\\n        }\\n        else if (ns.getServerMoneyAvailable(serverName) < moneyThreshold)\\n        {\\n            await ns.grow(serverName);\\n        }\\n        else\\n        {\\n            await ns.hack(serverName);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/old/hackServer.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/old/hackServer.js\",\"url\":\"blob:file:///3ac4412f-1050-45ed-86a5-86eb9cb2f137\",\"moduleSequenceNumber\":549}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":72,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**@param {NS} ns**/\\n\\nimport {getAllServerNames} from \\\"/scripts/util/util.js\\\"\\n\\nexport async function main(ns)\\n{\\n\\tvar currentServer = ns.getHostname();\\n\\n\\tvar fileNames = ns.ls(\\n\\t\\tcurrentServer,\\n\\t\\t\\\".js\\\");\\n\\n\\tvar serverNames = getAllServerNames(ns).sort();\\n\\n\\tfor (var i = 0; i < serverNames.length; i++)\\n\\t{\\n\\t\\tvar serverName = serverNames[i];\\n\\n\\t\\tawait ns.scp(\\n\\t\\t\\tfileNames,\\n\\t\\t\\tserverName);\\n\\t}\\n}\",\"filename\":\"/scripts/old/copyScripts.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///30d7e25e-9672-4ca7-94f2-c5d9f67e428d\",\"moduleSequenceNumber\":107800},{\"filename\":\"copyScripts.js\",\"url\":\"blob:file:///1495e251-b93a-4eff-a018-141be6650b57\",\"moduleSequenceNumber\":107826}],\"dependents\":[],\"ramUsage\":2.65,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":73,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**@param {NS} ns**/\\n\\nimport {getAllServerNames} from \\\"/scripts/util/util.js\\\"\\n\\nexport async function main(ns)\\n{\\n\\tvar serverName = ns.args[0];\\n\\n\\tif (serverName\\n\\t\\t&& serverName != \\\"all\\\")\\n\\t{\\n\\t\\tgetRootAccess(\\n\\t\\t\\tns,\\n\\t\\t\\tserverName);\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tvar serverNames = getAllServerNames(ns).sort();\\n\\n\\t\\tfor (var i = 0; i < serverNames.length; i++)\\n\\t\\t{\\n\\t\\t\\tserverName = serverNames[i];\\n\\n\\t\\t\\tif (!ns.hasRootAccess(serverName))\\n\\t\\t\\t{\\n\\t\\t\\t\\tgetRootAccess(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\tserverName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction getRootAccess(\\n\\tns,\\n\\tserverName)\\n{\\n\\tif (checkHaveEnoughHackingLevel(\\n\\t\\t\\tns,\\n\\t\\t\\tserverName))\\n\\t{\\n\\t\\tif (openPorts(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\tserverName))\\n\\t\\t{\\n\\t\\t\\tns.nuke(serverName);\\n\\n\\t\\t\\tns.tprint(\\n\\t\\t\\t\\t\\\"Root access granted to the server \\\"\\n\\t\\t\\t\\t+ serverName);\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction checkHaveEnoughHackingLevel(\\n\\tns,\\n\\tserverName)\\n{\\n\\tvar serverRequiredHackingLevel = ns.getServerRequiredHackingLevel(serverName);\\n\\n\\tvar hackingLevel = ns.getHackingLevel();\\n\\n\\tvar haveEnoughHackingLevel = serverRequiredHackingLevel <= hackingLevel;\\n\\n\\tif (!haveEnoughHackingLevel)\\n\\t{\\n\\t\\tns.tprint(\\n\\t\\t\\t\\\"Hacking level \\\"\\n\\t\\t\\t+ hackingLevel\\n\\t\\t\\t+ \\\" is not enough to hack the server \\\"\\n\\t\\t\\t+ serverName\\n\\t\\t\\t+ \\\" with required hacking level \\\"\\n\\t\\t\\t+ serverRequiredHackingLevel);\\n\\t}\\n\\n\\treturn haveEnoughHackingLevel;\\n}\\n\\nfunction openPorts(\\n\\tns,\\n\\tserverName)\\n{\\n\\tvar ret = false;\\n\\n\\tvar requiredPorts = ns.getServerNumPortsRequired(serverName);\\n\\n\\tswitch (requiredPorts)\\n\\t{\\n\\t\\tcase 5:\\n\\n\\t\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\"))\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.sqlinject(serverName);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\tcase 4:\\n\\n\\t\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\"))\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.httpworm(serverName);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\tcase 3:\\n\\n\\t\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\"))\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.relaysmtp(serverName);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\tcase 2:\\n\\n\\t\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\"))\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.ftpcrack(serverName);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\tcase 1:\\n\\n\\t\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\"))\\n\\t\\t\\t{\\n\\t\\t\\t\\tns.brutessh(serverName);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\tcase 0:\\n\\n\\t\\t\\tret = true;\\n\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\tif (!ret)\\n\\t{\\n\\t\\tns.tprint(\\n\\t\\t\\t\\\"Not enough software to open ports of the server \\\"\\n\\t\\t\\t+ serverName);\\n\\t}\\n\\n\\treturn ret;\\n}\",\"filename\":\"/scripts/old/getRootAccess.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///269adf1b-d777-485e-9792-8a7848c6c494\",\"moduleSequenceNumber\":57},{\"filename\":\"/scripts/old/getRootAccess.js\",\"url\":\"blob:file:///8b258b2d-76ab-4c4b-a383-061610ff75a5\",\"moduleSequenceNumber\":259}],\"dependents\":[],\"ramUsage\":2.5,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":74,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nimport {ServerAnalyzerService} from \\\"/scripts/services/ServerAnalyzerService.js\\\"\\n\\nimport {getAllServerNames} from \\\"/scripts/util/util.js\\\"\\n\\nexport async function main(ns)\\n{\\n\\tvar serverName = ns.args[0];\\n\\n\\tif (serverName\\n\\t\\t&& serverName != \\\"all\\\")\\n\\t{\\n\\t\\tvar serverAnalyzerService = new ServerAnalyzerService(\\n\\t\\t\\tns,\\n\\t\\t\\tserverName);\\n\\t\\t\\n\\t\\tserverAnalyzerService.startOperation();\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tvar filter = ns.args[1];\\n\\n\\t\\tvar serverNames = getAllServerNames(ns).sort();\\n\\n\\t\\tfor (var i = 0; i < serverNames.length; i++)\\n\\t\\t{\\n\\t\\t\\tserverName = serverNames[i];\\n\\n\\t\\t\\tif (shouldAnalyzeServer(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\tserverName,\\n\\t\\t\\t\\t\\tfilter))\\n\\t\\t\\t{\\n\\t\\t\\t\\tvar serverAnalyzerService = new ServerAnalyzerService(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\tserverName);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tserverAnalyzerService.startOperation();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction shouldAnalyzeServer(\\n\\tns,\\n\\tserverName,\\n\\tfilter)\\n{\\n\\tvar ret = true;\\n\\n\\tvar rootAccess = ns.hasRootAccess(serverName);\\n\\n\\tif (!rootAccess\\n\\t\\t&& filter != \\\"all\\\"\\n\\t\\t&& filter != \\\"psp\\\")\\n\\t{\\n\\t\\tret = false;\\n\\t}\\n\\n\\tif (ret\\n\\t\\t&& filter)\\n\\t{\\n\\t\\tswitch (filter)\\n\\t\\t{\\n\\t\\t\\tcase \\\"own\\\":\\n\\n\\t\\t\\t\\tif (serverName != \\\"home\\\"\\n\\t\\t\\t\\t\\t&& serverName.search(\\\"hack\\\") == -1)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tret = false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"res\\\":\\n\\n\\t\\t\\t\\tif (ns.getServerMaxMoney(serverName))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tret = false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"ext\\\":\\n\\n\\t\\t\\t\\tif (serverName == \\\"home\\\"\\n\\t\\t\\t\\t\\t|| serverName.search(\\\"hack\\\") != -1)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tret = false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"tgt\\\":\\n\\n\\t\\t\\t\\tif (!ns.getServerMaxMoney(serverName))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tret = false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"psp\\\":\\n\\n\\t\\t\\t\\tif (rootAccess\\n\\t\\t\\t\\t\\t|| ns.getServerRequiredHackingLevel(serverName) > ns.getHackingLevel()\\n\\t\\t\\t\\t\\t|| ns.getServerNumPortsRequired(serverName) > getNumOfHackablePorts(ns))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tret = false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\treturn ret;\\n}\\n\\nfunction getNumOfHackablePorts(ns)\\n{\\n\\tvar numOfHackablePorts = 0;\\n\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\"))\\n\\t{\\n\\t\\tnumOfHackablePorts++;\\n\\t}\\n\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\"))\\n\\t{\\n\\t\\tnumOfHackablePorts++;\\n\\t}\\n\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\"))\\n\\t{\\n\\t\\tnumOfHackablePorts++;\\n\\t}\\n\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\"))\\n\\t{\\n\\t\\tnumOfHackablePorts++;\\n\\t}\\n\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\"))\\n\\t{\\n\\t\\tnumOfHackablePorts++;\\n\\t}\\n\\n\\treturn numOfHackablePorts;\\n}\",\"filename\":\"/scripts/old/analyze.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///06893844-39a9-456d-9423-4eb41c776be7\",\"moduleSequenceNumber\":147},{\"filename\":\"/scripts/models/ServerInfoModel.js\",\"url\":\"blob:file:///dd6c98d4-761c-4805-8f8b-cd48e66d3136\",\"moduleSequenceNumber\":7364},{\"filename\":\"/scripts/services/ServerInfoBuilderService.js\",\"url\":\"blob:file:///41b45043-4c58-4185-bfed-0c4a2899e9d9\",\"moduleSequenceNumber\":14476},{\"filename\":\"/scripts/services/ServerAnalyzerService.js\",\"url\":\"blob:file:///4fa81d19-5ceb-4e53-a7b8-63c213b3c5da\",\"moduleSequenceNumber\":14478},{\"filename\":\"/scripts/analyze.js\",\"url\":\"blob:file:///8103595b-016a-4705-837e-35c015a53d4f\",\"moduleSequenceNumber\":14773}],\"dependents\":[],\"ramUsage\":2.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":75,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns)\\n{\\n\\tvar ram = ns.args[0];\\n\\n\\tif (ram == \\\"max\\\")\\n\\t{\\n\\t\\tns.tprint(ns.getPurchasedServerMaxRam());\\n\\n\\t\\tram = ns.getPurchasedServerMaxRam();\\n\\t}\\n\\n\\tns.purchaseServer(\\n\\t\\tgenerateServerName(ns),\\n\\t\\tram);\\n\\n\\tns.tprint(ns.getScriptLogs());\\n}\\n\\nfunction generateServerName(ns)\\n{\\n\\tvar serverName = \\\"\\\";\\n\\n\\tvar number = 1;\\n\\n\\twhile (serverName == \\\"\\\")\\n\\t{\\n\\t\\tvar serverNameForNumber = getServerNameForNumber(number);\\n\\n\\t\\tif (ns.serverExists(serverNameForNumber))\\n\\t\\t{\\n\\t\\t\\tnumber++;\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tserverName = serverNameForNumber;\\n\\t\\t}\\n\\t}\\n\\n\\treturn serverName;\\n}\\n\\nfunction getServerNameForNumber(number)\\n{\\n\\tvar serverName = \\\"\\\";\\n\\n\\tif (number < 10)\\n\\t{\\n\\t\\tserverName = \\\"hack0\\\" + number;\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tserverName = \\\"hack\\\" + number;\\n\\t}\\n\\n\\treturn serverName;\\n}\",\"filename\":\"/scripts/old/buyServer.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/buyServer.js\",\"url\":\"blob:file:///504b85ab-d63a-4981-9125-ee1cd92fb8a5\",\"moduleSequenceNumber\":1983}],\"dependents\":[],\"ramUsage\":4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":76,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport function getAllServerNames(\\n\\tns,\\n\\tserverName = 'home',\\n\\tallServerNames = ['home'])\\n{\\n\\tvar connectedServerNames = ns.scan(serverName);\\n\\n\\tfor (var i = 0; i < connectedServerNames.length; i++)\\n\\t{\\n\\t\\tvar connectedServerName = connectedServerNames[i];\\n\\n\\t\\tif (allServerNames.indexOf(connectedServerName) == -1)\\n\\t\\t{\\n\\t\\t\\tallServerNames.push(connectedServerName);\\n\\n\\t\\t\\tallServerNames = getAllServerNames(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\tconnectedServerName,\\n\\t\\t\\t\\tallServerNames);\\n\\t\\t}\\n\\t}\\n\\n\\treturn allServerNames;\\n}\\n\\nexport function getPurchasedServerNames(ns)\\n{\\n\\tvar purchasedServerNames = [];\\n\\n\\tvar connectedServerNames = ns.scan('home');\\n\\n\\tfor (var i = 0; i < connectedServerNames.length; i++)\\n\\t{\\n\\t\\tvar connectedServerName = connectedServerNames[i];\\n\\n\\t\\tif (connectedServerName.search('hack') != -1)\\n\\t\\t{\\n\\t\\t\\tpurchasedServerNames.push(connectedServerName);\\n\\t\\t}\\n\\t}\\n\\n\\treturn purchasedServerNames;\\n}\\n\\nexport async function executeOnRemoteServer(\\n\\tns,\\n\\tscriptName,\\n\\tserverName,\\n\\tnumThreads = 1,\\n\\targs = [])\\n{\\n\\tvar successfullRun = false;\\n\\n\\tvar serverFreeRAM = getServerFreeRAM(\\n\\t\\tns,\\n\\t\\tserverName);\\n\\n\\tvar scriptRAM = ns.getScriptRam(\\n\\t\\tscriptName,\\n\\t\\tns.getHostname());\\n\\n\\tif (numThreads == 'max')\\n\\t{\\n\\t\\tnumThreads = scriptRAM == 0 ?\\n\\t\\t\\t1 :\\n\\t\\t\\tMath.floor(serverFreeRAM / scriptRAM);\\n\\n\\t\\tif (numThreads == 0)\\n\\t\\t{\\n\\t\\t\\tnumThreads = 1;\\n\\t\\t}\\n\\t}\\n\\n\\tvar requiredRAM = scriptRAM * numThreads;\\n\\n\\tif (serverFreeRAM >= requiredRAM)\\n\\t{\\n\\t\\tawait ns.scp(\\n\\t\\t\\tscriptName,\\n\\t\\t\\tserverName);\\n\\n\\t\\tif (await ns.exec(\\n\\t\\t\\t\\tscriptName,\\n\\t\\t\\t\\tserverName,\\n\\t\\t\\t\\tnumThreads,\\n\\t\\t\\t\\t...args) != 0)\\n\\t\\t{\\n\\t\\t\\tsuccessfullRun = true;\\n\\t\\t}\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tns.print(\\n\\t\\t\\t'There is not enough RAM available on the server '\\n\\t\\t\\t+ serverName\\n\\t\\t\\t+ ' to run a script '\\n\\t\\t\\t+ scriptName\\n\\t\\t\\t+ ' with a number of threads '\\n\\t\\t\\t+ numThreads\\n\\t\\t\\t+ '. RAM required: '\\n\\t\\t\\t+ ns.formatRam(requiredRAM)\\n\\t\\t\\t+ ' ('\\n\\t\\t\\t+ ns.formatRam(scriptRAM)\\n\\t\\t\\t+ ' per thread). Available RAM: '\\n\\t\\t\\t+ ns.formatRam(serverFreeRAM)\\n\\t\\t\\t+ ' (Max: '\\n\\t\\t\\t+ ns.formatRam(ns.getServerMaxRam(serverName))\\n\\t\\t\\t+ ')');\\n\\t}\\n\\n\\treturn successfullRun;\\t\\n}\\n\\nexport function getServerFreeRAM(\\n\\tns,\\n\\tserverName)\\n{\\n\\tvar maxRAM = ns.getServerMaxRam(serverName);\\n\\n\\tvar currentScriptRAM = 0;\\n\\n\\tif (serverName == ns.getHostname())\\n\\t{\\n\\t\\tcurrentScriptRAM = ns.getScriptRam(\\n\\t\\t\\tns.getScriptName(),\\n\\t\\t\\tserverName);\\n\\t}\\n\\n\\tvar freeRAM = maxRAM - ns.getServerUsedRam(serverName) + currentScriptRAM;\\n\\t\\n\\treturn freeRAM;\\n}\",\"filename\":\"/scripts/util/util.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":77,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**@param {NS} ns**/\\n\\nimport {executeOnRemoteServer} from \\\"/scripts/util/util.js\\\"\\n\\nexport async function main(ns)\\n{\\n\\tvar sourceServerName = ns.args[0];\\n\\tvar targetServerName = ns.args[1];\\n\\tvar numThreads = ns.args[2];\\n\\tvar killAllScripts = ns.args[3];\\n\\n\\tawait remoteHackServer(\\n\\t\\tns,\\n\\t\\tsourceServerName,\\n\\t\\ttargetServerName,\\n\\t\\tnumThreads,\\n\\t\\tkillAllScripts);\\n}\\n\\nexport async function remoteHackServer(\\n\\tns,\\n\\tsourceServerName,\\n\\ttargetServerName,\\n\\tnumThreads,\\n\\tkillAllScripts)\\n{\\n\\tif (killAllScripts == \\\"yes\\\")\\n\\t{\\n\\t\\tns.killall(sourceServerName);\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tns.kill(\\n\\t\\t\\t\\\"/scripts/old/hackServer.js\\\",\\n\\t\\t\\tsourceServerName,\\n\\t\\t\\ttargetServerName)\\n\\t}\\n\\n\\tif (ns.hasRootAccess(sourceServerName))\\n\\t{\\n\\t\\tawait executeOnRemoteServer(\\n\\t\\t\\tns,\\n\\t\\t\\t\\\"/scripts/old/hackServer.js\\\",\\n\\t\\t\\tsourceServerName,\\n\\t\\t\\tnumThreads,\\n\\t\\t\\t[targetServerName]);\\n\\t}\\n}\",\"filename\":\"/scripts/old/remoteHackServer.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///b706a99d-a6ce-44f8-b04f-7d638173a457\",\"moduleSequenceNumber\":44},{\"filename\":\"/scripts/old/remoteHackServer.js\",\"url\":\"blob:file:///2468a2ac-1618-4263-8d8e-69ac5ec0760f\",\"moduleSequenceNumber\":403}],\"dependents\":[],\"ramUsage\":4.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":78,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport {getAllServerNames} from \\\"/scripts/util/util.js\\\"\\n\\nexport async function main(ns)\\n{\\n\\tvar serverNames = getAllServerNames(ns).sort();\\n\\n\\tfor (var i = 0; i < serverNames.length; i++)\\n\\t{\\n\\t\\tvar serverName = serverNames[i];\\n\\n\\t\\tvar contractNames = ns.ls(\\n\\t\\t\\tserverName,\\n\\t\\t\\t\\\".cct\\\");\\n\\n\\t\\tfor (var j = 0; j < contractNames.length; j++)\\n\\t\\t{\\n\\t\\t\\tvar contractName = contractNames[j];\\n\\n\\t\\t\\tns.tprint(\\n\\t\\t\\t\\t\\\"Server '\\\"\\n\\t\\t\\t\\t+ serverName\\n\\t\\t\\t\\t+ \\\"' contains contract '\\\"\\n\\t\\t\\t\\t+ contractName\\n\\t\\t\\t\\t+ \\\"' of type '\\\"\\n\\t\\t\\t\\t+ ns.codingcontract.getContractType(\\n\\t\\t\\t\\t\\tcontractName,\\n\\t\\t\\t\\t\\tserverName)\\n\\t\\t\\t\\t+ \\\"'\\\");\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/scripts/searchContracts.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///55e2cb7c-914a-4bf0-858c-da9fe543d059\",\"moduleSequenceNumber\":94},{\"filename\":\"/scripts/searchContracts.js\",\"url\":\"blob:file:///c4c52b61-7f61-4d73-a060-28d7c7a870fe\",\"moduleSequenceNumber\":7178}],\"dependents\":[],\"ramUsage\":7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":79,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport class StockPriceContractSolver\\n{\\n\\tnumOfTransactions = 0;\\n\\n\\tprices = [];\\n\\n\\tmaxProfit = 0;\\n\\n\\tconstructor(\\n\\t\\tnumOfTransactions,\\n\\t\\tprices)\\n\\t{\\n\\t\\tthis.numOfTransactions = numOfTransactions;\\n\\t\\t\\n\\t\\tthis.prices = prices;\\n\\t}\\n\\n\\tsolve()\\n\\t{\\n\\t\\tthis.searchMaxProfit();\\n\\n\\t\\treturn this.maxProfit;\\n\\t}\\n\\n\\tsearchMaxProfit()\\n\\t{\\n\\t\\tvar maxNumOfPricesPairs = Math.floor(this.prices.length / 2);\\n\\n\\t\\tvar maxNumOfPieces = Math.min(\\n\\t\\t\\tthis.numOfTransactions,\\n\\t\\t\\tmaxNumOfPricesPairs);\\n\\n\\t\\tfor (var i = 1; i <= maxNumOfPieces; i++)\\n\\t\\t{\\n\\t\\t\\tthis.searchMaxProfitInSpecifiedNumOfPieces(i);\\n\\t\\t}\\n\\t}\\n\\n\\tsearchMaxProfitInSpecifiedNumOfPieces(numOfPieces)\\n\\t{\\n\\t\\tif (this.canSearchMaxProfitInSpecifiedNumOfPieces(numOfPieces))\\n\\t\\t{\\n\\t\\t\\tthis.doRecursiveMaxProfitSearch(\\n\\t\\t\\t\\tnumOfPieces,\\n\\t\\t\\t\\t1,\\n\\t\\t\\t\\t0,\\n\\t\\t\\t\\t0);\\n\\t\\t}\\n\\t}\\n\\n\\tcanSearchMaxProfitInSpecifiedNumOfPieces(numOfPieces)\\n\\t{\\n\\t\\treturn this.prices.length / 2 >= numOfPieces;\\n\\t}\\n\\n\\tdoRecursiveMaxProfitSearch(\\n\\t\\tnumOfPieces,\\n\\t\\tcurrentPieceNum,\\n\\t\\tstartIndex,\\n\\t\\tpreviousProfit)\\n\\t{\\n\\t\\tif (currentPieceNum == numOfPieces)\\n\\t\\t{\\n\\t\\t\\tvar profit = previousProfit;\\n\\n\\t\\t\\tprofit += this.maxProfitInPriceSegment(\\n\\t\\t\\t\\tthis.prices.slice(\\n\\t\\t\\t\\t\\tstartIndex,\\n\\t\\t\\t\\t\\tthis.prices.length));\\n\\n\\t\\t\\tif (profit > this.maxProfit)\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.maxProfit = profit;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tfor (var i = startIndex + 1; i < (this.prices.length - 2 * (numOfPieces - currentPieceNum)); i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tvar profit = previousProfit;\\n\\n\\t\\t\\t\\tprofit += this.maxProfitInPriceSegment(\\n\\t\\t\\t\\t\\tthis.prices.slice(\\n\\t\\t\\t\\t\\t\\tstartIndex,\\n\\t\\t\\t\\t\\t\\ti + 1));\\n\\n\\t\\t\\t\\tthis.doRecursiveMaxProfitSearch(\\n\\t\\t\\t\\t\\tnumOfPieces,\\n\\t\\t\\t\\t\\tcurrentPieceNum + 1,\\n\\t\\t\\t\\t\\ti + 1,\\n\\t\\t\\t\\t\\tprofit);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tmaxProfitInPriceSegment(pricesSegment)\\n\\t{\\n\\t\\tvar maxProfit = 0;\\n\\n\\t\\tfor (var i = 0; i < pricesSegment.length; i++)\\n\\t\\t{\\n\\t\\t\\tvar purchPrice = pricesSegment[i];\\n\\n\\t\\t\\tfor (var j = i + 1; j < pricesSegment.length; j++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tvar salesPrice = pricesSegment[j];\\n\\n\\t\\t\\t\\tvar profit = salesPrice - purchPrice;\\n\\n\\t\\t\\t\\tif (profit > maxProfit)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tmaxProfit = profit;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn maxProfit;\\n\\t}\\n}\",\"filename\":\"/scripts/contractSolvers/StockPriceContractSolver.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"StockPriceContractSolver.js\",\"url\":\"blob:file:///375653ec-4fd4-4d66-902c-97d55ba1add1\",\"moduleSequenceNumber\":238120}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":80,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport {getAllServerNames} from \\\"/scripts/util/util.js\\\"\\n\\nimport {StockPriceContractSolver} from \\\"/scripts/contractSolvers/StockPriceContractSolver.js\\\"\\nimport {SanitizeParenthesesContractSolver} from \\\"/scripts/contractSolvers/SanitizeParenthesesContractSolver.js\\\"\\nimport {PrimeFactorContractSolver} from \\\"/scripts/contractSolvers/PrimeFactorContractSolver.js\\\"\\nimport {MaxSumContractSolver} from \\\"/scripts/contractSolvers/MaxSumContractSolver.js\\\"\\nimport {RLECompressionContractSolver} from \\\"/scripts/contractSolvers/RLECompressionContractSolver.js\\\"\\n\\nexport async function main(ns)\\n{\\n\\tvar runMode = ns.args[0];\\n\\n\\tvar serverNames = getAllServerNames(ns).sort();\\n\\n\\tfor (var i = 0; i < serverNames.length; i++)\\n\\t{\\n\\t\\tvar serverName = serverNames[i];\\n\\n\\t\\tvar contractNames = ns.ls(\\n\\t\\t\\tserverName,\\n\\t\\t\\t\\\".cct\\\");\\n\\n\\t\\tfor (var j = 0; j < contractNames.length; j++)\\n\\t\\t{\\n\\t\\t\\tvar contractName = contractNames[j];\\n\\n\\t\\t\\tif (serverName != \\\"stormtech\\\")\\n\\t\\t\\t{\\n\\t\\t\\t\\tsolveContract(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\tserverName,\\n\\t\\t\\t\\t\\tcontractName,\\n\\t\\t\\t\\t\\trunMode);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction solveContract(\\n\\tns,\\n\\tserverName,\\n\\tcontractName,\\n\\trunMode = \\\"final\\\")\\n{\\n\\tvar contractType = ns.codingcontract.getContractType(\\n\\t\\tcontractName,\\n\\t\\tserverName);\\n\\n\\tvar contractData = ns.codingcontract.getData(\\n\\t\\tcontractName,\\n\\t\\tserverName);\\n\\n\\tvar contractSolver;\\n\\n\\tswitch (contractType)\\n\\t{\\n\\t\\tcase \\\"Algorithmic Stock Trader I\\\":\\n\\t\\t\\n\\t\\t\\tvar prices = contractData;\\n\\n\\t\\t\\tcontractSolver = new StockPriceContractSolver(\\n\\t\\t\\t\\t1,\\n\\t\\t\\t\\tprices);\\n\\n\\t\\t\\tbreak;\\n\\n\\t\\tcase \\\"Algorithmic Stock Trader II\\\":\\n\\n\\t\\t\\tvar prices = contractData;\\n\\n\\t\\t\\tcontractSolver = new StockPriceContractSolver(\\n\\t\\t\\t\\tMath.floor(prices.length / 2),\\n\\t\\t\\t\\tprices);\\n\\t\\t\\t\\t\\n\\t\\t\\tbreak;\\n\\n\\t\\tcase \\\"Algorithmic Stock Trader III\\\":\\n\\n\\t\\t\\tvar prices = contractData;\\n\\n\\t\\t\\tcontractSolver = new StockPriceContractSolver(\\n\\t\\t\\t\\t2,\\n\\t\\t\\t\\tprices);\\n\\t\\t\\t\\t\\n\\t\\t\\tbreak;\\n\\n\\t\\tcase \\\"Algorithmic Stock Trader IV\\\":\\n\\n\\t\\t\\tvar numOfTransactions = contractData[0];\\n\\t\\t\\tvar prices = contractData[1];\\n\\n\\t\\t\\tcontractSolver = new StockPriceContractSolver(\\n\\t\\t\\t\\tnumOfTransactions,\\n\\t\\t\\t\\tprices);\\n\\t\\t\\t\\t\\n\\t\\t\\tbreak;\\n\\n\\t\\tcase \\\"Sanitize Parentheses in Expression\\\":\\n\\n\\t\\t\\tvar inputExpression = contractData;\\n\\n\\t\\t\\tcontractSolver = new SanitizeParenthesesContractSolver(inputExpression);\\n\\n\\t\\t\\tbreak;\\n\\n\\t\\tcase \\\"Find Largest Prime Factor\\\":\\n\\n\\t\\t\\tvar inputNumber = contractData;\\n\\n\\t\\t\\tcontractSolver = new PrimeFactorContractSolver(inputNumber);\\n\\n\\t\\t\\tbreak;\\n\\n\\t\\tcase 'Subarray with Maximum Sum':\\n\\n\\t\\t\\tvar numbers = contractData;\\n\\n\\t\\t\\tcontractSolver = new MaxSumContractSolver(numbers);\\n\\n\\t\\t\\tbreak;\\n\\n\\t\\tcase 'Compression I: RLE Compression':\\n\\n\\t\\t\\tvar inputExpression = contractData;\\n\\n\\t\\t\\tcontractSolver = new RLECompressionContractSolver(inputExpression);\\n\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\tif (contractSolver != null)\\n\\t{\\n\\t\\tvar result = contractSolver.solve();\\n\\n\\t\\tns.tprint(\\n\\t\\t\\t\\\"Result of the contract '\\\"\\n\\t\\t\\t+ contractName\\n\\t\\t\\t+ \\\"' of a type '\\\"\\n\\t\\t\\t+ contractType\\n\\t\\t\\t+ \\\"' on the server '\\\"\\n\\t\\t\\t+ serverName\\n\\t\\t\\t+ \\\"' is: \\\"\\n\\t\\t\\t+ result);\\n\\n\\t\\tif (runMode == \\\"final\\\")\\n\\t\\t{\\n\\t\\t\\tns.tprint(\\n\\t\\t\\t\\tns.codingcontract.attempt(\\n\\t\\t\\t\\t\\tresult,\\n\\t\\t\\t\\t\\tcontractName,\\n\\t\\t\\t\\t\\tserverName));\\n\\t\\t}\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tns.tprint(\\n\\t\\t\\t\\\"For the contract '\\\"\\n\\t\\t\\t+ contractName\\n\\t\\t\\t+ \\\"' of a type '\\\"\\n\\t\\t\\t+ contractType\\n\\t\\t\\t+ \\\"' on the server '\\\"\\n\\t\\t\\t+ serverName\\n\\t\\t\\t+ \\\"' there is no solver class yet\\\");\\n\\t}\\n}\",\"filename\":\"/scripts/old/solveContracts.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/contractSolvers/RLECompressionContractSolver.js\",\"url\":\"blob:file:///5a5ebf0b-f206-4ea9-bc71-4c1a206bf8be\",\"moduleSequenceNumber\":180},{\"filename\":\"/scripts/contractSolvers/MaxSumContractSolver.js\",\"url\":\"blob:file:///7ba5254e-fe1d-4a68-8fea-4e240e74e7c6\",\"moduleSequenceNumber\":179},{\"filename\":\"/scripts/contractSolvers/PrimeFactorContractSolver.js\",\"url\":\"blob:file:///31f8c9a2-54b0-45fb-9de3-b23713bf15bf\",\"moduleSequenceNumber\":178},{\"filename\":\"/scripts/contractSolvers/SanitizeParenthesesContractSolver.js\",\"url\":\"blob:file:///d35c19d8-8cb6-47e7-97f2-acb27893f675\",\"moduleSequenceNumber\":177},{\"filename\":\"/scripts/contractSolvers/StockPriceContractSolver.js\",\"url\":\"blob:file:///7623143b-39ff-4703-8bed-0910c6ccff63\",\"moduleSequenceNumber\":174},{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///51b0bba6-293d-4db5-adf1-b353d3382a8c\",\"moduleSequenceNumber\":169},{\"filename\":\"/scripts/solveContracts.js\",\"url\":\"blob:file:///b2f8986b-2a9f-4837-9097-111c24af0a30\",\"moduleSequenceNumber\":4010}],\"dependents\":[],\"ramUsage\":22,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":81,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar organizationSymbols = ns.stock.getSymbols();\\n\\n\\tfor (var i = 0; i < organizationSymbols.length; i++)\\n\\t{\\n\\t\\tvar organizationSymbol = organizationSymbols[i];\\n\\n\\t\\tvar numOfShares = getNumOfShares(organizationSymbol);\\n\\t\\tvar priceOfShare = getPriceOfShare(organizationSymbol);\\n\\n\\t\\tns.tprint(\\n\\t\\t\\torganizationSymbol\\n\\t\\t\\t+ \\\" - \\\"\\n\\t\\t\\t+ ns.stock.getOrganization(organizationSymbol)\\n\\t\\t\\t+ \\\": \\\"\\n\\t\\t\\t+ ns.formatNumber(numOfShares)\\n\\t\\t\\t+ \\\" (Max: \\\"\\n\\t\\t\\t+ ns.formatNumber(ns.stock.getMaxShares(organizationSymbol))\\n\\t\\t\\t+ \\\") X \\\"\\n\\t\\t\\t+ ns.formatNumber(priceOfShare)\\n\\t\\t\\t+ \\\" = \\\"\\n\\t\\t\\t+ ns.formatNumber(numOfShares * priceOfShare)\\n\\t\\t\\t+ \\\". Purchase cost: \\\"\\n\\t\\t\\t+ ns.formatNumber(\\n\\t\\t\\t\\tns.stock.getPurchaseCost(\\n\\t\\t\\t\\t\\torganizationSymbol,\\n\\t\\t\\t\\t\\t1,\\n\\t\\t\\t\\t\\t\\\"Long\\\"))\\n\\t\\t\\t+ \\\". Ask price: \\\"\\n\\t\\t\\t+ ns.formatNumber(ns.stock.getAskPrice(organizationSymbol))\\n\\t\\t\\t+ \\\". Bid price: \\\"\\n\\t\\t\\t+ ns.formatNumber(ns.stock.getBidPrice(organizationSymbol))\\n\\t\\t\\t+ \\\". Forecast: \\\"\\n\\t\\t\\t+ ns.stock.getForecast(organizationSymbol));\\n\\t}\\n\\n\\tfunction getNumOfShares(organizationSymbol)\\n\\t{\\n\\t\\treturn ns.stock.getPosition(organizationSymbol)[0];\\n\\t}\\n\\n\\tfunction getPriceOfShare(organizationSymbol)\\n\\t{\\n\\t\\treturn ns.stock.getPosition(organizationSymbol)[1];\\n\\t}\\n}\",\"filename\":\"/scripts/unfinished/autoStockTrade.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"util.js\",\"url\":\"blob:file:///75cd7627-36c6-49a0-9c99-794492d54e64\",\"moduleSequenceNumber\":81743},{\"filename\":\"autoStockTrade.js\",\"url\":\"blob:file:///caad0edc-55bc-4fb7-9e5f-e14dfb155cbf\",\"moduleSequenceNumber\":95102}],\"dependents\":[],\"ramUsage\":18.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":82,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getOrganization\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPurchaseCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport class SanitizeParenthesesContractSolver\\n{\\n\\tinputExpression = \\\"\\\";\\n\\n\\toutputExpressions = [];\\n\\n\\tminNumOfDeletes = 0;\\n\\n\\tconstructor(inputExpression)\\n\\t{\\n\\t\\tthis.inputExpression = inputExpression;\\n\\t}\\n\\n\\tsolve()\\n\\t{\\n\\t\\tthis.searchOutputExpressions();\\n\\n\\t\\treturn this.outputExpressionsString();\\n\\t}\\n\\n\\tsearchOutputExpressions()\\n\\t{\\n\\t\\tthis.doRecursiveOutputExpressionsSearch(this.inputExpression);\\n\\t}\\n\\n\\tdoRecursiveOutputExpressionsSearch(expression)\\n\\t{\\n\\t\\tvar numOfDeletes = this.deletesAmount(expression);\\n\\n\\t\\tif (numOfDeletes <= this.minNumOfDeletes\\n\\t\\t\\t|| this.outputExpressions.length == 0)\\n\\t\\t{\\n\\t\\t\\tif (this.validateParentheses(expression))\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (numOfDeletes == this.minNumOfDeletes)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tif (!this.outputExpressions.includes(expression))\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tthis.outputExpressions.push(expression);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tthis.outputExpressions = [expression];\\n\\n\\t\\t\\t\\t\\tthis.minNumOfDeletes = numOfDeletes;\\n\\t\\t\\t\\t}\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tfor (var i = 0; i < expression.length; i++)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tvar charachter = expression[i];\\n\\n\\t\\t\\t\\t\\tif (charachter == '('\\n\\t\\t\\t\\t\\t\\t|| charachter == ')')\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tthis.doRecursiveOutputExpressionsSearch(\\n\\t\\t\\t\\t\\t\\t\\tthis.removeCharacter(\\n\\t\\t\\t\\t\\t\\t\\t\\texpression,\\n\\t\\t\\t\\t\\t\\t\\t\\ti));\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tdeletesAmount(expression)\\n\\t{\\n\\t\\treturn this.inputExpression.length - expression.length;\\n\\t}\\n\\n\\tvalidateParentheses(expression)\\n\\t{\\n\\t\\tvar ret = true;\\n\\n\\t\\tvar openParentheses = 0;\\n\\n\\t\\tfor (var i = 0; i < expression.length; i++)\\n\\t\\t{\\n\\t\\t\\tvar character = expression[i];\\n\\n\\t\\t\\tif (character == '(')\\n\\t\\t\\t{\\n\\t\\t\\t\\topenParentheses++;\\n\\t\\t\\t}\\n\\t\\t\\telse if (character == ')')\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (openParentheses)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\topenParentheses--;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tret = false;\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (ret)\\n\\t\\t{\\n\\t\\t\\tret = openParentheses == 0;\\n\\t\\t}\\n\\n\\t\\treturn ret;\\n\\t}\\n\\n\\tremoveCharacter(\\n\\t\\texpression,\\n\\t\\tcharacterIndex)\\n\\t{\\n\\t\\tvar ret = expression.substring(\\n\\t\\t\\t0,\\n\\t\\t\\tcharacterIndex);\\n\\n\\t\\tif (characterIndex + 1 < expression.length)\\n\\t\\t{\\n\\t\\t\\tret += expression.substr(\\n\\t\\t\\t\\tcharacterIndex + 1,\\n\\t\\t\\t\\texpression.length);\\n\\t\\t}\\n\\n\\t\\treturn ret;\\n\\t}\\n\\n\\toutputExpressionsString()\\n\\t{\\n\\t\\tvar ret = '[';\\n\\n\\t\\tif (this.outputExpressions.length > 0)\\n\\t\\t{\\n\\t\\t\\tvar firstExpression = true;\\n\\n\\t\\t\\tfor (var i = 0; i < this.outputExpressions.length; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (firstExpression)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tfirstExpression = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tret += ', ';\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tret += this.outputExpressions[i];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tret += '\\\"\\\"';\\n\\t\\t}\\n\\n\\t\\tret += ']';\\n\\n\\t\\treturn ret;\\n\\t}\\n}\",\"filename\":\"/scripts/contractSolvers/SanitizeParenthesesContractSolver.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"SanitizeParenthesesContractSolver.js\",\"url\":\"blob:file:///33ba8d70-e93c-4bb8-bafe-0af6c2b14d29\",\"moduleSequenceNumber\":111822}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":83,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport class PrimeFactorContractSolver\\n{\\n\\tinputNumber = 0;\\n\\n\\tprimeFactors = [];\\n\\n\\tconstructor(inputNumber)\\n\\t{\\n\\t\\tthis.inputNumber = inputNumber;\\n\\t}\\n\\n\\tsolve()\\n\\t{\\n\\t\\tthis.doRecursivePrimeFactorsSearch(this.inputNumber);\\n\\n\\t\\treturn this.largestPrimeFactor();\\n\\t}\\n\\n\\tdoRecursivePrimeFactorsSearch(number)\\n\\t{\\n\\t\\tfor (var i = 2; i <= number; i++)\\n\\t\\t{\\n\\t\\t\\tif (number % i == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.primeFactors.push(i);\\n\\n\\t\\t\\t\\tthis.doRecursivePrimeFactorsSearch(number / i);\\n\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tlargestPrimeFactor()\\n\\t{\\n\\t\\tvar largestPrimeFactor = 0;\\n\\n\\t\\tfor (var i = 0; i < this.primeFactors.length; i++)\\n\\t\\t{\\n\\t\\t\\tvar primeFactor = this.primeFactors[i];\\n\\n\\t\\t\\tif (primeFactor > largestPrimeFactor)\\n\\t\\t\\t{\\n\\t\\t\\t\\tlargestPrimeFactor = primeFactor;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn largestPrimeFactor;\\n\\t}\\n}\",\"filename\":\"/scripts/contractSolvers/PrimeFactorContractSolver.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"PrimeFactorContractSolver.js\",\"url\":\"blob:file:///12493ecf-8c2c-4950-bbcc-c9dbb7805eab\",\"moduleSequenceNumber\":34715}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":84,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport class MaxSumContractSolver\\n{\\n\\tnumbers = [];\\n\\n\\tmaxSum = 0;\\n\\n\\tconstructor(numbers)\\n\\t{\\n\\t\\tthis.numbers = numbers;\\n\\t}\\n\\n\\tsolve()\\n\\t{\\n\\t\\tthis.searchMaxSum();\\n\\n\\t\\treturn this.maxSum;\\n\\t}\\n\\n\\tsearchMaxSum()\\n\\t{\\n\\t\\tfor (var i = 1; i <= this.numbers.length; i++)\\n\\t\\t{\\n\\t\\t\\tthis.searchMaxSumInPiecesOfSpecifiedSize(i);\\n\\t\\t}\\n\\t}\\n\\n\\tsearchMaxSumInPiecesOfSpecifiedSize(sizeOfPiece)\\n\\t{\\n\\t\\tfor (var i = 0; i < this.numbers.length - sizeOfPiece + 1; i++)\\n\\t\\t{\\n\\t\\t\\tvar sum = this.sumInNumbersSegment(\\n\\t\\t\\t\\tthis.numbers.slice(\\n\\t\\t\\t\\t\\ti,\\n\\t\\t\\t\\t\\ti + sizeOfPiece));\\n\\n\\t\\t\\tif (sum > this.maxSum)\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.maxSum = sum;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tsumInNumbersSegment(numbersSegment)\\n\\t{\\n\\t\\tvar sum = 0;\\n\\n\\t\\tfor (var i = 0; i < numbersSegment.length; i++)\\n\\t\\t{\\n\\t\\t\\tvar number = numbersSegment[i];\\n\\n\\t\\t\\tsum += number;\\n\\t\\t}\\n\\n\\t\\treturn sum;\\n\\t}\\n}\",\"filename\":\"/scripts/contractSolvers/MaxSumContractSolver.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"MaxSumContractSolver.js\",\"url\":\"blob:file:///73978b39-1659-4475-b0e3-73549e7d0bda\",\"moduleSequenceNumber\":5568}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":85,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport class RLECompressionContractSolver\\n{\\n\\tinputExpression = '';\\n\\n\\toutputExpression = '';\\n\\n\\tconstructor(inputExpression)\\n\\t{\\n\\t\\tthis.inputExpression = inputExpression;\\n\\t}\\n\\n\\tsolve()\\n\\t{\\n\\t\\tthis.buildOutputExpression();\\n\\n\\t\\treturn this.outputExpression;\\n\\t}\\n\\n\\tbuildOutputExpression()\\n\\t{\\n\\t\\tvar lastCharacter = '';\\n\\t\\tvar numOfLastCharacters = 0;\\n\\n\\t\\tfor (var i = 0; i < this.inputExpression.length; i++)\\n\\t\\t{\\n\\t\\t\\tvar character = this.inputExpression[i];\\n\\n\\t\\t\\tif (character == lastCharacter\\n\\t\\t\\t\\t&& numOfLastCharacters < 9)\\n\\t\\t\\t{\\n\\t\\t\\t\\tnumOfLastCharacters++;\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (lastCharacter\\n\\t\\t\\t\\t\\t&& numOfLastCharacters)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tthis.outputExpression += '' + numOfLastCharacters + lastCharacter;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tlastCharacter = character;\\n\\t\\t\\t\\tnumOfLastCharacters = 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (lastCharacter\\n\\t\\t\\t&& numOfLastCharacters)\\n\\t\\t{\\n\\t\\t\\tthis.outputExpression += '' + numOfLastCharacters + lastCharacter;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/scripts/contractSolvers/RLECompressionContractSolver.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/contractSolvers/RLECompressionContractSolver.js\",\"url\":\"blob:file:///bd4e7f94-99bb-41b3-be6b-04318bf1d797\",\"moduleSequenceNumber\":14842}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":86,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport {getAllServerNames} from \\\"/scripts/util/util.js\\\"\\nimport {executeOnRemoteServer} from \\\"/scripts/util/util.js\\\"\\n\\nexport async function main(ns)\\n{\\n\\tvar serverNames = getAllServerNames(ns);\\n\\n\\tfor (var i = 0; i < serverNames.length; i++)\\n\\t{\\n\\t\\tvar serverName = serverNames[i];\\n\\n\\t\\tif (ns.hasRootAccess(serverName)\\n\\t\\t\\t&& ns.getServerMaxMoney(serverName) > 0\\n\\t\\t\\t&& !ns.isRunning(\\n\\t\\t\\t\\t\\t'/scripts/managers/HackingManager.js',\\n\\t\\t\\t\\t\\tns.getHostname(),\\n\\t\\t\\t\\t\\tserverName))\\n\\t\\t{\\n\\t\\t\\tawait executeOnRemoteServer(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"/scripts/managers/HackingManager.js\\\",\\n\\t\\t\\t\\tns.getHostname(),\\n\\t\\t\\t\\t1,\\n\\t\\t\\t\\t[serverName]);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/scripts/old/autoHack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///762eb4fc-9aa7-4eef-a77f-36ebb11a8e7d\",\"moduleSequenceNumber\":61},{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///73eca87a-1200-45c6-902b-6e0d9f20f316\",\"moduleSequenceNumber\":61},{\"filename\":\"/scripts/autoHack.js\",\"url\":\"blob:file:///37b89ebc-04f0-4312-806b-de04ee5416e3\",\"moduleSequenceNumber\":392}],\"dependents\":[],\"ramUsage\":4.2,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":87,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport {Manager} from \\\"/scripts/managers/Manager.js\\\"\\n\\nimport {WeakenController} from \\\"/scripts/controllers/WeakenController.js\\\"\\nimport {GrowController} from \\\"/scripts/controllers/GrowController.js\\\"\\nimport {HackController} from \\\"/scripts/controllers/HackController.js\\\"\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tvar hackingManager = new HackingManager(\\n\\t\\tns,\\n\\t\\ttargetServerName);\\n\\n\\tawait hackingManager.startOperation();\\n}\\n\\nexport class HackingManager extends Manager\\n{\\n\\ttargetServerName = '';\\n\\n\\tminSecurityLevel = 0;\\n\\tacceptableSecurityLevelDifference = 0;\\n\\n\\tmaxMoney = 0;\\n\\tacceptableMoneyLevelPercentage = 100;\\n\\n\\tconstructor(\\n\\t\\tns,\\n\\t\\ttargetServerName)\\n\\t{\\n\\t\\tsuper(ns);\\n\\n\\t\\tthis.waitTime = 0;\\n\\n\\t\\tthis.targetServerName = targetServerName;\\n\\t}\\n\\n\\tvalidate()\\n\\t{\\n\\t\\treturn this.ns.hasRootAccess(this.targetServerName)\\n\\t\\t\\t&& this.ns.getServerMaxMoney(this.targetServerName) > 0;\\n\\t}\\n\\n\\tdisableLogs()\\n\\t{\\n\\t\\tthis.ns.disableLog('scan');\\n\\t\\tthis.ns.disableLog('scp');\\n\\t\\tthis.ns.disableLog('hasRootAccess');\\n\\t\\tthis.ns.disableLog('getServerMaxRam');\\n\\t\\tthis.ns.disableLog('getServerUsedRam');\\n\\t}\\n\\n\\tinit()\\n\\t{\\n\\t\\tthis.minSecurityLevel = this.ns.getServerMinSecurityLevel(this.targetServerName);\\n\\t\\tthis.maxMoney = this.ns.getServerMaxMoney(this.targetServerName);\\t\\n\\t}\\n\\n\\tasync manage()\\n\\t{\\n\\t\\tvar couldRunOperation = false;\\n\\n\\t\\tif (this.ns.getServerSecurityLevel(this.targetServerName) > this.minSecurityLevel + this.acceptableSecurityLevelDifference)\\n\\t\\t{\\n\\t\\t\\tvar weakenController = new WeakenController(\\n\\t\\t\\t\\tthis.ns,\\n\\t\\t\\t\\tthis.targetServerName);\\n\\n\\t\\t\\tcouldRunOperation = await weakenController.startOperation();\\n\\t\\t}\\n\\t\\telse if (this.ns.getServerMoneyAvailable(this.targetServerName) < this.maxMoney * (this.acceptableMoneyLevelPercentage / 100))\\n\\t\\t{\\n\\t\\t\\tvar growController = new GrowController(\\n\\t\\t\\t\\tthis.ns,\\n\\t\\t\\t\\tthis.targetServerName);\\n\\n\\t\\t\\tcouldRunOperation = await growController.startOperation();\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tvar hackController = new HackController(\\n\\t\\t\\t\\tthis.ns,\\n\\t\\t\\t\\tthis.targetServerName);\\n\\n\\t\\t\\tcouldRunOperation = await hackController.startOperation();\\n\\t\\t}\\n\\n\\t\\tif (!couldRunOperation)\\n\\t\\t{\\n\\t\\t\\tawait this.ns.sleep(10000); \\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/scripts/managers/HackingManager.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///c36ac116-6958-46ce-b314-8c568b43dba1\",\"moduleSequenceNumber\":77},{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///54bd3f8d-0caf-4ccf-9cfb-85068604190f\",\"moduleSequenceNumber\":77},{\"filename\":\"/scripts/controllers/HackingOperationController.js\",\"url\":\"blob:file:///4dc72674-bfec-442f-8667-99c74c984ba8\",\"moduleSequenceNumber\":89},{\"filename\":\"/scripts/controllers/HackController.js\",\"url\":\"blob:file:///e350652a-d426-4c17-8ceb-23e96abb431d\",\"moduleSequenceNumber\":92},{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///bb827e1b-0909-4185-9da2-0663bf61d02a\",\"moduleSequenceNumber\":77},{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///0d0fe124-ba2a-479e-b75a-55342ed22856\",\"moduleSequenceNumber\":77},{\"filename\":\"/scripts/controllers/HackingOperationController.js\",\"url\":\"blob:file:///7ef4d849-64d5-4024-9076-cd3abc5c05ef\",\"moduleSequenceNumber\":89},{\"filename\":\"/scripts/controllers/GrowController.js\",\"url\":\"blob:file:///13a1b231-7005-4c3d-a146-9f29540ccbc7\",\"moduleSequenceNumber\":91},{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///8a7b2720-c93c-4a43-98f9-1ae88d545b72\",\"moduleSequenceNumber\":77},{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///7844e9a8-bd81-4285-bf08-dade00200794\",\"moduleSequenceNumber\":77},{\"filename\":\"/scripts/controllers/HackingOperationController.js\",\"url\":\"blob:file:///236a3e50-e58e-4833-baf0-752543de93b4\",\"moduleSequenceNumber\":89},{\"filename\":\"/scripts/controllers/WeakenController.js\",\"url\":\"blob:file:///869fe0da-65ee-4ae7-a7ca-33250d6b69ee\",\"moduleSequenceNumber\":90},{\"filename\":\"/scripts/managers/Manager.js\",\"url\":\"blob:file:///ce68c730-deef-447c-afe0-233fe89929c5\",\"moduleSequenceNumber\":99},{\"filename\":\"/scripts/managers/HackingManager.js\",\"url\":\"blob:file:///476c1abe-3c90-415f-a6a5-54a113261435\",\"moduleSequenceNumber\":144}],\"dependents\":[],\"ramUsage\":9.55,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":144,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport {executeOnRemoteServer} from \\\"/scripts/util/util.js\\\"\\nimport {getAllServerNames} from \\\"/scripts/util/util.js\\\"\\n\\nexport class HackingOperationController\\n{\\n\\tns;\\n\\n\\ttargetServerName = '';\\n\\n\\tscriptName = '';\\n\\tscriptRAM = 0;\\n\\n\\thomeReservedRAMPercent = 10;\\n\\n\\tconstructor(\\n\\t\\tns,\\n\\t\\ttargetServerName)\\n\\t{\\n\\t\\tthis.ns = ns;\\n\\n\\t\\tthis.targetServerName = targetServerName;\\n\\t}\\n\\n\\tasync startOperation()\\n\\t{\\n\\t\\tvar couldRunOperation = false;\\n\\t\\t\\n\\t\\tvar numOfThreadsLeftToRun = this.getNumOfThreads();\\n\\n\\t\\tvar serverNames = getAllServerNames(this.ns);\\n\\n\\t\\tfor (var i = 0; i < serverNames.length; i++)\\n\\t\\t{\\n\\t\\t\\tvar serverName = serverNames[i];\\n\\n\\t\\t\\tif (serverName != 'home')\\n\\t\\t\\t{\\n\\t\\t\\t\\tvar numOfExecutedThreads = await this.runOperationOnServer(\\n\\t\\t\\t\\t\\tserverName,\\n\\t\\t\\t\\t\\tnumOfThreadsLeftToRun);\\n\\n\\t\\t\\t\\tif (numOfExecutedThreads > 0)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tcouldRunOperation = true;\\n\\n\\t\\t\\t\\t\\tnumOfThreadsLeftToRun -= numOfExecutedThreads\\n\\n\\t\\t\\t\\t\\tif (numOfThreadsLeftToRun <= 0)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (numOfThreadsLeftToRun > 0)\\n\\t\\t{\\n\\t\\t\\tvar numOfExecutedThreads = await this.runOperationOnServer(\\n\\t\\t\\t\\t'home',\\n\\t\\t\\t\\tnumOfThreadsLeftToRun);\\n\\n\\t\\t\\tif (numOfExecutedThreads > 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tcouldRunOperation = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (couldRunOperation)\\n\\t\\t{\\n\\t\\t\\tawait this.ns.sleep(this.getSleepTime());\\n\\t\\t}\\n\\n\\t\\treturn couldRunOperation;\\n\\t}\\n\\n\\tasync runOperationOnServer(\\n\\t\\tserverName,\\n\\t\\tnumOfThreadsRequired)\\n\\t{\\n\\t\\tvar numOfExecutedThreads = 0;\\n\\n\\t\\tif (this.ns.hasRootAccess(serverName))\\n\\t\\t{\\n\\t\\t\\tvar serverFreeRAM = this.getServerFreeRAM(serverName);\\n\\n\\t\\t\\tif (serverFreeRAM > this.scriptRAM)\\n\\t\\t\\t{\\n\\t\\t\\t\\tvar serverFreeThreads = Math.floor(serverFreeRAM / this.scriptRAM);\\n\\n\\t\\t\\t\\tvar numOfThreadsCoefficient = this.getNumOfThreadsCoefficient();\\n\\n\\t\\t\\t\\tvar numOfThreadsToExecute = Math.min(\\n\\t\\t\\t\\t\\tserverFreeThreads,\\n\\t\\t\\t\\t\\tMath.ceil(numOfThreadsRequired * numOfThreadsCoefficient));\\n\\n\\t\\t\\t\\tif (await executeOnRemoteServer(\\n\\t\\t\\t\\t\\t\\tthis.ns,\\n\\t\\t\\t\\t\\t\\tthis.scriptName,\\n\\t\\t\\t\\t\\t\\tserverName,\\n\\t\\t\\t\\t\\t\\tnumOfThreadsToExecute,\\n\\t\\t\\t\\t\\t\\t[this.targetServerName]))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tnumOfExecutedThreads = numOfThreadsToExecute;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn numOfExecutedThreads;\\n\\t}\\n\\n\\tgetNumOfThreads(numOfCores = 1)\\n\\t{\\n\\t\\treturn 0;\\n\\t}\\n\\n\\tgetServerFreeRAM(serverName)\\n\\t{\\n\\t\\tvar serverFreeRAM = this.ns.getServerMaxRam(serverName) - this.ns.getServerUsedRam(serverName);\\n\\n\\t\\tif (serverName == 'home')\\n\\t\\t{\\n\\t\\t\\tserverFreeRAM *= (100 - this.homeReservedRAMPercent) / 100;\\n\\t\\t}\\n\\n\\t\\treturn serverFreeRAM;\\n\\t}\\n\\n\\tgetNumOfThreadsCoefficient(serverName)\\n\\t{\\n\\t\\treturn 1;\\n\\t}\\n\\n\\tgetSleepTime()\\n\\t{\\n\\t\\treturn 0;\\n\\t}\\n}\",\"filename\":\"/scripts/controllers/HackingOperationController.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":89,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport {HackingOperationController} from \\\"/scripts/controllers/HackingOperationController.js\\\"\\n\\nexport class WeakenController extends HackingOperationController\\n{\\n\\tconstructor(\\n\\t\\tns,\\n\\t\\ttargetServerName)\\n\\t{\\n\\t\\tsuper(\\n\\t\\t\\tns,\\n\\t\\t\\ttargetServerName);\\n\\n\\t\\tthis.scriptName = '/scripts/export/weaken.js';\\n\\n\\t\\tthis.scriptRAM = ns.getScriptRam(\\n\\t\\t\\tthis.scriptName,\\n\\t\\t\\t'home');\\t\\n\\t}\\n\\n\\tgetNumOfThreadsCoefficient(serverName)\\n\\t{\\n\\t\\tvar numOfThreadsCoefficient;\\n\\n\\t\\tif (serverName == 'home')\\n\\t\\t{\\n\\t\\t\\tnumOfThreadsCoefficient = this.getNumOfThreads(this.ns.getServer('home').cpuCores) / this.getNumOfThreads(1);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tnumOfThreadsCoefficient = super.getNumOfThreadsCoefficient(serverName);\\n\\t\\t}\\n\\n\\t\\treturn numOfThreadsCoefficient;\\n\\t}\\n\\n\\tgetNumOfThreads(numOfCores = 1)\\n\\t{\\n\\t\\tvar currentSecurityLevel = this.ns.getServerSecurityLevel(this.targetServerName);\\n\\t\\tvar minSecurityLevel = this.ns.getServerMinSecurityLevel(this.targetServerName);\\n\\n\\t\\treturn Math.ceil((currentSecurityLevel - minSecurityLevel) / this.ns.weakenAnalyze(numOfCores));\\n\\t}\\n\\n\\tgetSleepTime()\\n\\t{\\n\\t\\treturn this.ns.getWeakenTime(this.targetServerName) * 1.1;\\n\\t}\\n}\",\"filename\":\"/scripts/controllers/WeakenController.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.25,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":90,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport {HackingOperationController} from \\\"/scripts/controllers/HackingOperationController.js\\\"\\n\\nexport class GrowController extends HackingOperationController\\n{\\n\\tconstructor(\\n\\t\\tns,\\n\\t\\ttargetServerName)\\n\\t{\\n\\t\\tsuper(\\n\\t\\t\\tns,\\n\\t\\t\\ttargetServerName);\\n\\n\\t\\tthis.scriptName = '/scripts/export/grow.js';\\n\\n\\t\\tthis.scriptRAM = ns.getScriptRam(\\n\\t\\t\\tthis.scriptName,\\n\\t\\t\\t'home');\\t\\n\\t}\\n\\n\\tgetNumOfThreadsCoefficient(serverName)\\n\\t{\\n\\t\\tvar numOfThreadsCoefficient;\\n\\n\\t\\tif (serverName == 'home')\\n\\t\\t{\\n\\t\\t\\tnumOfThreadsCoefficient = this.getNumOfThreads(this.ns.getServer('home').cpuCores) / this.getNumOfThreads(1);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tnumOfThreadsCoefficient = super.getNumOfThreadsCoefficient(serverName);\\n\\t\\t}\\n\\n\\t\\treturn numOfThreadsCoefficient;\\n\\t}\\n\\n\\tgetNumOfThreads(numOfCores = 1)\\n\\t{\\n\\t\\tvar maxMoney = this.ns.getServerMaxMoney(this.targetServerName);\\n\\t\\tvar currentMoney = this.ns.getServerMoneyAvailable(this.targetServerName);\\n\\n\\t\\tif (currentMoney == 0)\\n\\t\\t{\\n\\t\\t\\tcurrentMoney = 1;\\n\\t\\t}\\n\\n\\t\\tvar growthMultiplier = maxMoney / currentMoney;\\n\\n\\t\\treturn Math.ceil(\\n\\t\\t\\tthis.ns.growthAnalyze(\\n\\t\\t\\t\\tthis.targetServerName,\\n\\t\\t\\t\\tgrowthMultiplier,\\n\\t\\t\\t\\tnumOfCores));\\n\\t}\\n\\n\\tgetSleepTime()\\n\\t{\\n\\t\\treturn this.ns.getGrowTime(this.targetServerName) * 1.1;\\n\\t}\\n}\",\"filename\":\"/scripts/controllers/GrowController.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.25,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":91,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport {HackingOperationController} from \\\"/scripts/controllers/HackingOperationController.js\\\"\\n\\nexport class HackController extends HackingOperationController\\n{\\n\\tconstructor(\\n\\t\\tns,\\n\\t\\ttargetServerName)\\n\\t{\\n\\t\\tsuper(\\n\\t\\t\\tns,\\n\\t\\t\\ttargetServerName);\\n\\n\\t\\tthis.scriptName = '/scripts/export/hack.js';\\n\\n\\t\\tthis.scriptRAM = ns.getScriptRam(\\n\\t\\t\\tthis.scriptName,\\n\\t\\t\\t'home');\\t\\n\\t}\\n\\n\\tgetNumOfThreads(numOfCores = 1)\\n\\t{\\n\\t\\treturn Math.ceil(\\n\\t\\t\\tthis.ns.hackAnalyzeThreads(\\n\\t\\t\\t\\tthis.targetServerName,\\n\\t\\t\\t\\tthis.ns.getServerMoneyAvailable(this.targetServerName)));\\n\\t}\\n\\n\\tgetSleepTime()\\n\\t{\\n\\t\\treturn this.ns.getHackTime(this.targetServerName) * 1.1;\\n\\t}\\n}\",\"filename\":\"/scripts/controllers/HackController.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.15,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":92,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.weaken(targetServerName);\\n}\",\"filename\":\"/scripts/export/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/weaken.js\",\"url\":\"blob:file:///c0d5ebc1-16b8-4ce7-a078-a1ee8347900f\",\"moduleSequenceNumber\":684}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.grow(targetServerName);\\n}\",\"filename\":\"/scripts/export/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/grow.js\",\"url\":\"blob:file:///282ae8fb-4c39-423a-8728-c3f776b4a23f\",\"moduleSequenceNumber\":311}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.hack(targetServerName);\\n}\",\"filename\":\"/scripts/export/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/hack.js\",\"url\":\"blob:file:///c6883c78-3e31-409f-85e5-7fff15c288b8\",\"moduleSequenceNumber\":310}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**@param {NS} ns**/\\n\\nimport {Manager} from \\\"/scripts/managers/Manager.js\\\"\\n\\nimport {getAllServerNames} from \\\"/scripts/util/util.js\\\"\\n\\nexport async function main(ns)\\n{\\n\\tvar accessManager = new AccessManager(ns);\\n\\n\\tawait accessManager.startOperation();\\n}\\n\\nexport class AccessManager extends Manager\\n{\\n\\ttargetServerNames = [];\\n\\n\\ttorRouter = false;\\n\\n\\tnumOfHackingSoftwareInstalled = 0;\\n\\n\\thasBruteSSH = false;\\n\\thasFTPCrack = false;\\n\\thasRelaySMTP = false;\\n\\thasHTTPWorm = false;\\n\\thasSQLInject = false;\\n\\n\\tconstructor(ns)\\n\\t{\\n\\t\\tsuper(ns);\\n\\t}\\n\\n\\tdisableLogs()\\n\\t{\\n\\t\\tthis.ns.disableLog('hasRootAccess');\\n\\t\\tthis.ns.disableLog('getServerRequiredHackingLevel');\\n\\t\\tthis.ns.disableLog('getHackingLevel');\\n\\t\\tthis.ns.disableLog('getServerNumPortsRequired');\\n\\t\\tthis.ns.disableLog('fileExists');\\n\\t\\tthis.ns.disableLog('scan');\\n\\t}\\n\\n\\tinit()\\n\\t{\\n\\t\\tthis.targetServerNames = getAllServerNames(this.ns);\\n\\n\\t\\tthis.torRouter = this.ns.hasTorRouter();\\n\\t}\\n\\n\\tasync manage()\\n\\t{\\n\\t\\tthis.updateHackingSoftwareInfo();\\n\\n\\t\\tthis.updateTargetServerList();\\n\\n\\t\\tvar targetServerNamesLeft = [];\\n\\n\\t\\tfor (var i = 0; i < this.targetServerNames.length; i++)\\n\\t\\t{\\n\\t\\t\\tvar targetServerName = this.targetServerNames[i];\\n\\n\\t\\t\\tif (!this.ns.hasRootAccess(targetServerName)\\n\\t\\t\\t\\t&& !this.getRootAccess(targetServerName))\\n\\t\\t\\t{\\n\\t\\t\\t\\ttargetServerNamesLeft.push(targetServerName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthis.targetServerNames = targetServerNamesLeft;\\n\\t}\\n\\n\\tupdateHackingSoftwareInfo()\\n\\t{\\n\\t\\tif (this.numOfHackingSoftwareInstalled < 5)\\n\\t\\t{\\n\\t\\t\\tif (!this.hasBruteSSH\\n\\t\\t\\t\\t&& this.ns.fileExists(\\\"BruteSSH.exe\\\"))\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.hasBruteSSH = true;\\n\\n\\t\\t\\t\\tthis.numOfHackingSoftwareInstalled++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!this.hasFTPCrack\\n\\t\\t\\t\\t&& this.ns.fileExists(\\\"FTPCrack.exe\\\"))\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.hasFTPCrack = true;\\n\\n\\t\\t\\t\\tthis.numOfHackingSoftwareInstalled++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!this.hasRelaySMTP\\n\\t\\t\\t\\t&& this.ns.fileExists(\\\"relaySMTP.exe\\\"))\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.hasRelaySMTP = true;\\n\\n\\t\\t\\t\\tthis.numOfHackingSoftwareInstalled++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!this.hasHTTPWorm\\n\\t\\t\\t\\t&& this.ns.fileExists(\\\"HTTPWorm.exe\\\"))\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.hasHTTPWorm = true;\\n\\n\\t\\t\\t\\tthis.numOfHackingSoftwareInstalled++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!this.hasSQLInject\\n\\t\\t\\t\\t&& this.ns.fileExists(\\\"SQLInject.exe\\\"))\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.hasSQLInject = true;\\n\\n\\t\\t\\t\\tthis.numOfHackingSoftwareInstalled++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tupdateTargetServerList()\\n\\t{\\n\\t\\tif (!this.torRouter\\n\\t\\t\\t&& this.ns.hasTorRouter())\\n\\t\\t{\\n\\t\\t\\tthis.torRouter = true;\\n\\n\\t\\t\\tthis.targetServerNames = getAllServerNames(this.ns);\\n\\t\\t}\\n\\t}\\n\\n\\tgetRootAccess(serverName)\\n\\t{\\n\\t\\tvar ret = false;\\n\\n\\t\\tif (this.isHackingLevelEnough(serverName))\\n\\t\\t{\\n\\t\\t\\tif (this.openPorts(serverName))\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.ns.nuke(serverName);\\n\\n\\t\\t\\t\\tret = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn ret;\\n\\t}\\n\\n\\tisHackingLevelEnough(serverName)\\n\\t{\\n\\t\\treturn this.ns.getServerRequiredHackingLevel(serverName) <= this.ns.getHackingLevel();\\n\\t}\\n\\n\\topenPorts(serverName)\\n\\t{\\n\\t\\tvar ret = false;\\n\\n\\t\\tvar requiredPorts = this.ns.getServerNumPortsRequired(serverName);\\n\\n\\t\\tif (requiredPorts <= this.numOfHackingSoftwareInstalled)\\n\\t\\t{\\n\\t\\t\\tif (requiredPorts > 0\\n\\t\\t\\t\\t&& this.hasBruteSSH)\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.ns.brutessh(serverName);\\n\\n\\t\\t\\t\\trequiredPorts--;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (requiredPorts > 0\\n\\t\\t\\t\\t&& this.hasFTPCrack)\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.ns.ftpcrack(serverName);\\n\\n\\t\\t\\t\\trequiredPorts--;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (requiredPorts > 0\\n\\t\\t\\t\\t&& this.hasRelaySMTP)\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.ns.relaysmtp(serverName);\\n\\n\\t\\t\\t\\trequiredPorts--;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (requiredPorts > 0\\n\\t\\t\\t\\t&& this.hasHTTPWorm)\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.ns.httpworm(serverName);\\n\\n\\t\\t\\t\\trequiredPorts--;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (requiredPorts > 0\\n\\t\\t\\t\\t&& this.hasSQLInject)\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.ns.sqlinject(serverName);\\n\\t\\t\\t}\\n\\n\\t\\t\\tret = true;\\n\\t\\t}\\n\\n\\t\\treturn ret;\\n\\t}\\n\\n\\tshouldStopOperation()\\n\\t{\\n\\t\\treturn this.targetServerNames.length == 0;\\n\\t}\\n}\",\"filename\":\"/scripts/managers/AccessManager.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///83cceb31-a7c9-48fe-99ff-c6e5056774c5\",\"moduleSequenceNumber\":77},{\"filename\":\"/scripts/managers/Manager.js\",\"url\":\"blob:file:///ab95b4d1-b275-4fab-bc3f-20d5234e4ec5\",\"moduleSequenceNumber\":99},{\"filename\":\"/scripts/managers/AccessManager.js\",\"url\":\"blob:file:///34918fc3-eab2-424b-98f0-7452f206f924\",\"moduleSequenceNumber\":143}],\"dependents\":[],\"ramUsage\":2.55,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport {Manager} from \\\"/scripts/managers/Manager.js\\\"\\n\\nimport {getAllServerNames} from \\\"/scripts/util/util.js\\\"\\nimport {executeOnRemoteServer} from \\\"/scripts/util/util.js\\\"\\n\\nexport async function main(ns)\\n{\\n\\tvar deploymentManager = new DeploymentManager(ns);\\n\\n\\tawait deploymentManager.startOperation();\\n}\\n\\nexport class DeploymentManager extends Manager\\n{\\n\\tserverNames = [];\\n\\n\\tconstructor(ns)\\n\\t{\\n\\t\\tsuper(ns);\\n\\t}\\n\\n\\tdisableLogs()\\n\\t{\\n\\t\\tthis.ns.disableLog('isRunning');\\n\\t\\tthis.ns.disableLog('getHostname');\\n\\t\\tthis.ns.disableLog('hasRootAccess');\\n\\t\\tthis.ns.disableLog('getServerMaxMoney');\\n\\t\\tthis.ns.disableLog('scan');\\n\\t\\tthis.ns.disableLog('scp');\\n\\t\\tthis.ns.disableLog('getServerMaxRam');\\n\\t\\tthis.ns.disableLog('getServerUsedRam');\\n\\t}\\n\\n\\tinit()\\n\\t{\\n\\t\\tthis.serverNames = getAllServerNames(this.ns);\\n\\t}\\n\\n\\tasync manage()\\n\\t{\\n\\t\\tawait this.deployAccessManager();\\n\\n\\t\\tawait this.deployHardwareManager();\\n\\n\\t\\tawait this.deployHacknetManager();\\n\\n\\t\\tif (this.canDeployContractManager())\\n\\t\\t{\\n\\t\\t\\tawait this.deployContractManager();\\n\\t\\t}\\n\\n\\t\\tif (this.canDeployGangManager())\\n\\t\\t{\\n\\t\\t\\tawait this.deployGangManager();\\n\\t\\t}\\n\\n\\t\\tfor (var i = 0; i < this.serverNames.length; i++)\\n\\t\\t{\\n\\t\\t\\tvar serverName = this.serverNames[i];\\n\\n\\t\\t\\tif (this.canDeployHackingManager(serverName))\\n\\t\\t\\t{\\n\\t\\t\\t\\tawait this.deployHackingManager(serverName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tasync deployAccessManager()\\n\\t{\\n\\t\\tif (!this.ns.isRunning(\\n\\t\\t\\t\\t'/scripts/managers/AccessManager.js',\\n\\t\\t\\t\\tthis.ns.getHostname()))\\n\\t\\t{\\n\\t\\t\\tawait executeOnRemoteServer(\\n\\t\\t\\t\\tthis.ns,\\n\\t\\t\\t\\t'/scripts/managers/AccessManager.js',\\n\\t\\t\\t\\tthis.ns.getHostname(),\\n\\t\\t\\t\\t1);\\n\\t\\t}\\n\\t}\\n\\n\\tasync deployHardwareManager()\\n\\t{\\n\\t\\tif (!this.ns.isRunning(\\n\\t\\t\\t\\t'/scripts/managers/HardwareManager.js',\\n\\t\\t\\t\\tthis.ns.getHostname()))\\n\\t\\t{\\n\\t\\t\\tawait executeOnRemoteServer(\\n\\t\\t\\t\\tthis.ns,\\n\\t\\t\\t\\t'/scripts/managers/HardwareManager.js',\\n\\t\\t\\t\\tthis.ns.getHostname(),\\n\\t\\t\\t\\t1);\\n\\t\\t}\\n\\t}\\n\\n\\tasync deployHacknetManager()\\n\\t{\\n\\t\\tif (!this.ns.isRunning(\\n\\t\\t\\t\\t'/scripts/managers/HacknetManager.js',\\n\\t\\t\\t\\tthis.ns.getHostname()))\\n\\t\\t{\\n\\t\\t\\tawait executeOnRemoteServer(\\n\\t\\t\\t\\tthis.ns,\\n\\t\\t\\t\\t'/scripts/managers/HacknetManager.js',\\n\\t\\t\\t\\tthis.ns.getHostname(),\\n\\t\\t\\t\\t1);\\n\\t\\t}\\n\\t}\\n\\n\\tcanDeployContractManager()\\n\\t{\\n\\t\\treturn this.ns.getServerMaxRam(this.ns.getHostname()) >= 256;\\n\\t}\\n\\n\\tasync deployContractManager()\\n\\t{\\n\\t\\tif (!this.ns.isRunning(\\n\\t\\t\\t\\t'/scripts/managers/ContractManager.js',\\n\\t\\t\\t\\tthis.ns.getHostname()))\\n\\t\\t{\\n\\t\\t\\tawait executeOnRemoteServer(\\n\\t\\t\\t\\tthis.ns,\\n\\t\\t\\t\\t'/scripts/managers/ContractManager.js',\\n\\t\\t\\t\\tthis.ns.getHostname(),\\n\\t\\t\\t\\t1);\\n\\t\\t}\\n\\t}\\n\\n\\tcanDeployGangManager()\\n\\t{\\n\\t\\treturn this.ns.gang.inGang()\\n\\t\\t\\t&& this.ns.getServerMaxRam(this.ns.getHostname()) >= 256;\\n\\t}\\n\\n\\tasync deployGangManager()\\n\\t{\\n\\t\\tif (!this.ns.isRunning(\\n\\t\\t\\t\\t'/scripts/managers/GangManager.js',\\n\\t\\t\\t\\tthis.ns.getHostname()))\\n\\t\\t{\\n\\t\\t\\tawait executeOnRemoteServer(\\n\\t\\t\\t\\tthis.ns,\\n\\t\\t\\t\\t'/scripts/managers/GangManager.js',\\n\\t\\t\\t\\tthis.ns.getHostname(),\\n\\t\\t\\t\\t1);\\n\\t\\t}\\n\\t}\\n\\n\\tcanDeployHackingManager(targetServerName)\\n\\t{\\n\\t\\treturn this.ns.hasRootAccess(targetServerName)\\n\\t\\t\\t&& this.ns.getServerMaxMoney(targetServerName) > 0;\\n\\t}\\n\\n\\tasync deployHackingManager(targetServerName)\\n\\t{\\n\\t\\tif (!this.ns.isRunning(\\n\\t\\t\\t\\t'/scripts/managers/HackingManager.js',\\n\\t\\t\\t\\tthis.ns.getHostname(),\\n\\t\\t\\t\\ttargetServerName))\\n\\t\\t{\\n\\t\\t\\tawait executeOnRemoteServer(\\n\\t\\t\\t\\tthis.ns,\\n\\t\\t\\t\\t'/scripts/managers/HackingManager.js',\\n\\t\\t\\t\\tthis.ns.getHostname(),\\n\\t\\t\\t\\t1,\\n\\t\\t\\t\\t[targetServerName]);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/scripts/managers/DeploymentManager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///aa777c10-e6fa-4d6c-a3eb-b3f00a2337ab\",\"moduleSequenceNumber\":252},{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///369ffc6c-a027-4f6f-83ab-e8f467497137\",\"moduleSequenceNumber\":252},{\"filename\":\"/scripts/managers/Manager.js\",\"url\":\"blob:file:///53c5e467-b02b-4d6e-8dfb-9f8fad5b7769\",\"moduleSequenceNumber\":274},{\"filename\":\"/scripts/managers/DeploymentManager.js\",\"url\":\"blob:file:///7b6cf0a0-156e-4e5f-b004-dac57e4e3157\",\"moduleSequenceNumber\":493}],\"dependents\":[],\"ramUsage\":5.2,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":97,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**@param {NS} ns**/\\n\\nimport {Manager} from \\\"/scripts/managers/Manager.js\\\"\\n\\nimport {getPurchasedServerNames} from \\\"/scripts/util/util.js\\\"\\n\\nexport async function main(ns)\\n{\\n\\tvar hardwareManager = new HardwareManager(ns);\\n\\n\\tawait hardwareManager.startOperation();\\n}\\n\\nexport class HardwareManager extends Manager\\n{\\n\\tfractionOfMoneyForHardwareUpgrades = 0.001;\\n\\n\\ttorRouter = false;\\n\\n\\tserverNames = [];\\n\\n\\tupgradableServerNames = [];\\n\\n\\tmoneyForHardwareUpgrades = 0;\\n\\n\\tnewServerCost = 0;\\n\\n\\tconstructor(ns)\\n\\t{\\n\\t\\tsuper(ns);\\n\\t}\\n\\n\\tdisableLogs()\\n\\t{\\n\\t\\tthis.ns.disableLog('scan');\\n\\t\\tthis.ns.disableLog('getPurchasedServerCost');\\n\\t\\tthis.ns.disableLog('getServerMoneyAvailable');\\n\\t\\tthis.ns.disableLog('getHostname');\\n\\t\\tthis.ns.disableLog('getServerMaxRam');\\n\\t\\tthis.ns.disableLog('getPurchasedServerMaxRam');\\n\\t\\tthis.ns.disableLog('hasTorRouter');\\n\\t\\tthis.ns.disableLog('serverExists');\\n\\t\\tthis.ns.disableLog('getPurchasedServerUpgradeCost');\\n\\t\\tthis.ns.disableLog('upgradePurchasedServer');\\n\\t}\\n\\n\\tinit()\\n\\t{\\n\\t\\tthis.newServerCost = this.ns.getPurchasedServerCost(2);\\n\\t}\\n\\n\\tasync manage()\\n\\t{\\n\\t\\tthis.updateInfo();\\n\\n\\t\\tthis.buyTorRouter();\\n\\n\\t\\tthis.buyServers();\\n\\n\\t\\tthis.upgradeServers();\\n\\t}\\n\\n\\tupdateInfo()\\n\\t{\\n\\t\\tthis.waitTime = 60000;\\n\\n\\t\\tthis.moneyForHardwareUpgrades = this.ns.getServerMoneyAvailable('home') * this.fractionOfMoneyForHardwareUpgrades;\\n\\n\\t\\tvar serverNamesUpdated = false;\\n\\n\\t\\tif (this.serverNames.length != 25)\\n\\t\\t{\\n\\t\\t\\tvar numOfServerNames = this.serverNames.length;\\n\\n\\t\\t\\tthis.serverNames = getPurchasedServerNames(this.ns);\\n\\n\\t\\t\\tserverNamesUpdated = numOfServerNames != this.serverNames.length;\\n\\t\\t}\\n\\n\\t\\tif (serverNamesUpdated\\n\\t\\t\\t|| this.upgradableServerNames.length > 0)\\n\\t\\t{\\n\\t\\t\\tvar newUpgradableServerNames = [];\\n\\n\\t\\t\\tfor (var i = 0; i < this.serverNames.length; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tvar serverName = this.serverNames[i];\\n\\n\\t\\t\\t\\tif (this.ns.getServerMaxRam(serverName) < this.ns.getPurchasedServerMaxRam())\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tnewUpgradableServerNames.push(serverName);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.upgradableServerNames = newUpgradableServerNames;\\n\\t\\t}\\n\\n\\t\\tif (!this.torRouter\\n\\t\\t\\t&& this.ns.hasTorRouter())\\n\\t\\t{\\n\\t\\t\\tthis.torRouter = true;\\n\\t\\t}\\n\\t}\\n\\n\\tbuyTorRouter()\\n\\t{\\n\\t\\tif (!this.torRouter\\n\\t\\t\\t&& this.moneyForHardwareUpgrades > 0)\\n\\t\\t{\\n\\t\\t\\t//TODO Singularity\\n\\t\\t}\\n\\t}\\n\\n\\tbuyServers()\\n\\t{\\n\\t\\twhile (this.serverNames.length != 25\\n\\t\\t\\t   && this.newServerCost < this.moneyForHardwareUpgrades)\\n\\t\\t{\\n\\t\\t\\tvar newServerName = this.generateServerName();\\n\\n\\t\\t\\tthis.ns.purchaseServer(\\n\\t\\t\\t\\tnewServerName,\\n\\t\\t\\t\\t2);\\n\\n\\t\\t\\tthis.serverNames.push(newServerName);\\n\\n\\t\\t\\tthis.upgradableServerNames.push(newServerName);\\n\\n\\t\\t\\tthis.moneyForHardwareUpgrades -= this.newServerCost;\\n\\n\\t\\t\\tthis.waitTime = 1000;\\n\\t\\t}\\n\\t}\\n\\n\\tgenerateServerName()\\n\\t{\\n\\t\\tvar serverName = '';\\n\\n\\t\\tvar number = 1;\\n\\n\\t\\twhile (serverName == '')\\n\\t\\t{\\n\\t\\t\\tvar serverNameForNumber = this.getServerNameForNumber(number);\\n\\n\\t\\t\\tif (this.ns.serverExists(serverNameForNumber))\\n\\t\\t\\t{\\n\\t\\t\\t\\tnumber++;\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tserverName = serverNameForNumber;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn serverName;\\n\\t}\\n\\n\\tgetServerNameForNumber(number)\\n\\t{\\n\\t\\tvar prefix = number < 10 ?\\n\\t\\t\\t'hack0' :\\n\\t\\t\\t'hack';\\n\\n\\t\\treturn prefix + number;\\n\\t}\\n\\n\\tupgradeServers()\\n\\t{\\n\\t\\tfor (var i = 0; i < this.upgradableServerNames.length; i++)\\n\\t\\t{\\n\\t\\t\\tthis.upgradeServer(this.upgradableServerNames[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tupgradeServer(serverName)\\n\\t{\\n\\t\\tvar mustTryToUpgradeMore = true;\\n\\n\\t\\twhile (mustTryToUpgradeMore)\\n\\t\\t{\\n\\t\\t\\tvar newRAM = this.ns.getServerMaxRam(serverName) * 2;\\n\\n\\t\\t\\tvar upgradeCost = this.ns.getPurchasedServerUpgradeCost(\\n\\t\\t\\t\\tserverName,\\n\\t\\t\\t\\tnewRAM);\\n\\n\\t\\t\\tif (upgradeCost < this.moneyForHardwareUpgrades\\n\\t\\t\\t\\t&& this.ns.upgradePurchasedServer(\\n\\t\\t\\t\\t\\t\\tserverName,\\n\\t\\t\\t\\t\\t\\tnewRAM))\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.moneyForHardwareUpgrades -= upgradeCost;\\n\\n\\t\\t\\t\\tthis.ns.print(\\n\\t\\t\\t\\t\\t'Server '\\n\\t\\t\\t\\t\\t+ serverName\\n\\t\\t\\t\\t\\t+ ' has been upgraded to '\\n\\t\\t\\t\\t\\t+ this.ns.formatRam(newRAM)\\n\\t\\t\\t\\t\\t+ ' RAM for '\\n\\t\\t\\t\\t\\t+ this.ns.formatNumber(upgradeCost));\\n\\n\\t\\t\\t\\tthis.waitTime = 1000;\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tmustTryToUpgradeMore = false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tshouldStopOperation()\\n\\t{\\n\\t\\treturn this.torRouter\\n\\t\\t\\t&& this.serverNames.length == 25\\n\\t\\t\\t&& this.upgradableServerNames.length == 0;\\n\\t}\\n}\",\"filename\":\"/scripts/managers/HardwareManager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///63a820b9-5022-476b-9b89-e6cd8427dd32\",\"moduleSequenceNumber\":252},{\"filename\":\"/scripts/managers/Manager.js\",\"url\":\"blob:file:///94cccb4e-3d3f-4c88-84ba-e88a204dd0dc\",\"moduleSequenceNumber\":274},{\"filename\":\"/scripts/managers/HardwareManager.js\",\"url\":\"blob:file:///dd6b80b1-6bb6-446c-9d1a-b0737b954fb0\",\"moduleSequenceNumber\":495}],\"dependents\":[],\"ramUsage\":5,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":98,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerUpgradeCost\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"upgradePurchasedServer\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**@param {NS} ns**/\\n\\nexport class Manager\\n{\\n\\tns;\\n\\n\\twaitTime = 60000;\\n\\n\\tconstructor(ns)\\n\\t{\\n\\t\\tthis.ns = ns;\\n\\t}\\n\\n\\tasync startOperation()\\n\\t{\\n\\t\\tif (!this.validate())\\n\\t\\t{\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tthis.disableLogs();\\n\\n\\t\\tthis.init();\\n\\n\\t\\twhile (true)\\n\\t\\t{\\n\\t\\t\\tawait this.manage();\\n\\n\\t\\t\\tif (this.shouldStopOperation())\\n\\t\\t\\t{\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\telse if (this.waitTime > 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tawait this.ns.sleep(this.waitTime);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tvalidate()\\n\\t{\\n\\t\\treturn true;\\n\\t}\\n\\n\\tdisableLogs()\\n\\t{\\n\\n\\t}\\n\\n\\tinit()\\n\\t{\\n\\t\\t\\n\\t}\\n\\n\\tasync manage()\\n\\t{\\n\\t\\t\\n\\t}\\n\\n\\tshouldStopOperation()\\n\\t{\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"/scripts/managers/Manager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":99,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**@param {NS} ns**/\\n\\nimport {Manager} from \\\"/scripts/managers/Manager.js\\\"\\n\\nexport async function main(ns)\\n{\\n\\tvar gangManager = new GangManager(ns);\\n\\n\\tawait gangManager.startOperation();\\n}\\n\\nexport class GangManager extends Manager\\n{\\n\\taugmentationNames = [];\\n\\tequipmentNames = [];\\n\\n\\tnewMembersNames = ['Tommy', 'Paul', 'Sam', 'Mike', 'Frank', 'Trevor', 'Zack', 'Dave', 'Andy', 'Luke', 'Goro', 'Kiryu'];\\n\\n\\tfractionOfMoneyForAugmentationsPurchase = 0.01;\\n\\tfractionOfMoneyForEquipmentPurchase = 0.001;\\n\\n\\texpectedTotalMultipliersGain = 10;\\n\\n\\tmoneyForAugmentationsPurchase = 0;\\n\\tmoneyForEquipmentPurchase = 0;\\n\\n\\tconstructor(ns)\\n\\t{\\n\\t\\tsuper(ns);\\n\\t}\\n\\n\\tvalidate()\\n\\t{\\n\\t\\treturn this.ns.gang.inGang();\\n\\t}\\n\\n\\tdisableLogs()\\n\\t{\\n\\t\\tthis.ns.disableLog('gang.getEquipmentNames');\\n\\t\\tthis.ns.disableLog('gang.getEquipmentType');\\n\\t\\tthis.ns.disableLog('gang.canRecruitMember');\\n\\t\\tthis.ns.disableLog('gang.getMemberNames');\\n\\t\\tthis.ns.disableLog('gang.getMemberInformation');\\n\\t\\tthis.ns.disableLog('gang.getEquipmentCost');\\n\\t\\tthis.ns.disableLog('getServerMoneyAvailable');\\n\\t\\tthis.ns.disableLog('gang.getAscensionResult');\\n\\t}\\n\\n\\tinit()\\n\\t{\\n\\t\\tvar allEquipmentNames = this.ns.gang.getEquipmentNames();\\n\\n\\t\\tfor (var i = 0; i < allEquipmentNames.length; i++)\\n\\t\\t{\\n\\t\\t\\tvar equipmentName = allEquipmentNames[i];\\n\\n\\t\\t\\tif (this.ns.gang.getEquipmentType(equipmentName) == 'Augmentation')\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.augmentationNames.push(equipmentName);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.equipmentNames.push(equipmentName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tasync manage()\\n\\t{\\n\\t\\tthis.updateInfo();\\n\\n\\t\\tthis.recruitMembers();\\n\\n\\t\\tthis.manageMembers();\\n\\t}\\n\\n\\tupdateInfo()\\n\\t{\\n\\t\\tthis.waitTime = 60000;\\n\\n\\t\\tthis.moneyForAugmentationsPurchase = this.ns.getServerMoneyAvailable('home') * this.fractionOfMoneyForAugmentationsPurchase;\\n\\t\\tthis.moneyForEquipmentPurchase = this.ns.getServerMoneyAvailable('home') * this.fractionOfMoneyForEquipmentPurchase;\\n\\t}\\n\\n\\trecruitMembers()\\n\\t{\\n\\t\\twhile (this.ns.gang.canRecruitMember())\\n\\t\\t{\\n\\t\\t\\tvar memberName = this.getNewMemberName();\\n\\n\\t\\t\\tthis.ns.gang.recruitMember(memberName);\\n\\n\\t\\t\\tthis.ns.gang.setMemberTask(\\n\\t\\t\\t\\tmemberName,\\n\\t\\t\\t\\tthis.ns.gang.getGangInformation().isHacking ?\\n\\t\\t\\t\\t\\t'Train Hacking' :\\n\\t\\t\\t\\t\\t'Train Combat');\\t\\n\\t\\t}\\n\\t}\\n\\n\\tgetNewMemberName()\\n\\t{\\n\\t\\tvar newMemberName = '';\\n\\n\\t\\tvar memberNames = this.ns.gang.getMemberNames();\\n\\n\\t\\tfor (var i = 0; i < this.newMembersNames.length; i++)\\n\\t\\t{\\n\\t\\t\\tvar memberName = this.newMembersNames[i];\\n\\n\\t\\t\\tif (memberNames.indexOf(memberName) == -1)\\n\\t\\t\\t{\\n\\t\\t\\t\\tnewMemberName = memberName;\\n\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn newMemberName;\\n\\t}\\n\\n\\tmanageMembers()\\n\\t{\\n\\t\\tvar memberNames = this.ns.gang.getMemberNames();\\n\\n\\t\\tfor (var i = 0; i < memberNames.length; i++)\\n\\t\\t{\\n\\t\\t\\tvar memberName = memberNames[i];\\n\\n\\t\\t\\tthis.purchaseAugmentationsForMember(memberName);\\n\\n\\t\\t\\tif (this.shouldAscendMember(memberName))\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.ns.gang.ascendMember(memberName);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tthis.purchaseEquipmentForMember(memberName);\\n\\t\\t}\\n\\t}\\n\\n\\tpurchaseAugmentationsForMember(memberName)\\n\\t{\\n\\t\\tvar gangMemberInfo = this.ns.gang.getMemberInformation(memberName);\\n\\n\\t\\tif (gangMemberInfo.augmentations.length < this.equipmentNames.length)\\n\\t\\t{\\n\\t\\t\\tfor (var i = 0; i < this.augmentationNames.length; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tvar augmentationName = this.augmentationNames[i];\\n\\n\\t\\t\\t\\tif (gangMemberInfo.augmentations.indexOf(augmentationName) == -1\\n\\t\\t\\t\\t\\t&& this.ns.gang.getEquipmentCost(augmentationName) < this.moneyForAugmentationsPurchase)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tthis.ns.gang.purchaseEquipment(\\n\\t\\t\\t\\t\\t\\tmemberName,\\n\\t\\t\\t\\t\\t\\taugmentationName);\\n\\n\\t\\t\\t\\t\\tthis.waitTime = 1000;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tshouldAscendMember(memberName)\\n\\t{\\n\\t\\tvar ret = false;\\n\\n\\t\\tvar ascensionResult = this.ns.gang.getAscensionResult(memberName);\\n\\n\\t\\tif (ascensionResult != undefined)\\n\\t\\t{\\n\\t\\t\\tvar agilityMultiplierGain = (ascensionResult.agi - 1) * 100;\\n\\t\\t\\tvar charismaMultiplierGain = (ascensionResult.cha - 1) * 100;\\n\\t\\t\\tvar defenceMultiplierGain = (ascensionResult.def - 1) * 100;\\n\\t\\t\\tvar dexterityMultiplierGain = (ascensionResult.dex - 1) * 100;\\n\\t\\t\\tvar hackingMultiplierGain = (ascensionResult.hack - 1) * 100;\\n\\t\\t\\tvar strengthMultiplierGain = (ascensionResult.str - 1) * 100;\\n\\n\\t\\t\\tvar totalMultipliersGain = agilityMultiplierGain + charismaMultiplierGain + defenceMultiplierGain + dexterityMultiplierGain + hackingMultiplierGain + strengthMultiplierGain;\\n\\n\\t\\t\\tret = totalMultipliersGain >= this.expectedTotalMultipliersGain;\\n\\t\\t}\\n\\n\\t\\treturn ret;\\n\\t}\\n\\n\\tpurchaseEquipmentForMember(memberName)\\n\\t{\\n\\t\\tvar gangMemberInfo = this.ns.gang.getMemberInformation(memberName);\\n\\n\\t\\tif (gangMemberInfo.upgrades.length < this.equipmentNames.length)\\n\\t\\t{\\n\\t\\t\\tfor (var i = 0; i < this.equipmentNames.length; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tvar equipmentName = this.equipmentNames[i];\\n\\n\\t\\t\\t\\tif (gangMemberInfo.upgrades.indexOf(equipmentName) == -1\\n\\t\\t\\t\\t\\t&& this.ns.gang.getEquipmentCost(equipmentName) < this.moneyForEquipmentPurchase)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tthis.ns.gang.purchaseEquipment(\\n\\t\\t\\t\\t\\t\\tmemberName,\\n\\t\\t\\t\\t\\t\\tequipmentName);\\n\\n\\t\\t\\t\\t\\tthis.waitTime = 1000;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/scripts/managers/GangManager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/managers/Manager.js\",\"url\":\"blob:file:///06122764-0624-403e-97d6-cfbcebf069e5\",\"moduleSequenceNumber\":274},{\"filename\":\"/scripts/managers/GangManager.js\",\"url\":\"blob:file:///dfe90d12-7877-42c9-a912-6dcf5080aa8e\",\"moduleSequenceNumber\":498}],\"dependents\":[],\"ramUsage\":27.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentType\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**@param {NS} ns**/\\n\\nimport {Manager} from \\\"/scripts/managers/Manager.js\\\"\\n\\nimport {StockPriceContractSolver} from \\\"/scripts/contractSolvers/StockPriceContractSolver.js\\\"\\nimport {SanitizeParenthesesContractSolver} from \\\"/scripts/contractSolvers/SanitizeParenthesesContractSolver.js\\\"\\nimport {PrimeFactorContractSolver} from \\\"/scripts/contractSolvers/PrimeFactorContractSolver.js\\\"\\nimport {MaxSumContractSolver} from \\\"/scripts/contractSolvers/MaxSumContractSolver.js\\\"\\nimport {RLECompressionContractSolver} from \\\"/scripts/contractSolvers/RLECompressionContractSolver.js\\\"\\nimport {LZDecompressionContractSolver} from \\\"scripts/contractSolvers/LZDecompressionContractSolver.js\\\"\\nimport {LZCompressionContractSolver} from \\\"scripts/contractSolvers/LZCompressionContractSolver.js\\\"\\nimport {IPAddressesContractSolver} from \\\"/scripts/contractSolvers/IPAddressesContractSolver.js\\\"\\nimport {ArrayJumpingContractSolver} from \\\"/scripts/contractSolvers/ArrayJumpingContractSolver.js\\\"\\n\\nimport {getAllServerNames} from \\\"/scripts/util/util.js\\\"\\n\\nexport async function main(ns)\\n{\\n\\tvar contractManager = new ContractManager(ns);\\n\\n\\tawait contractManager.startOperation();\\n}\\n\\nexport class ContractManager extends Manager\\n{\\n\\tserverNames = [];\\n\\n\\tsendResults = true;\\n\\n\\tconstructor(ns)\\n\\t{\\n\\t\\tsuper(ns);\\n\\t}\\n\\n\\tdisableLogs()\\n\\t{\\n\\t\\tthis.ns.disableLog('scan');\\n\\t\\tthis.ns.disableLog('ls');\\n\\t\\tthis.ns.disableLog('codingcontract.getContractType');\\n\\t\\tthis.ns.disableLog('codingcontract.getData');\\n\\t}\\n\\n\\tinit()\\n\\t{\\n\\t\\tthis.serverNames = getAllServerNames(this.ns);\\n\\t}\\n\\n\\tasync manage()\\n\\t{\\n\\t\\tfor (var i = 0; i < this.serverNames.length; i++)\\n\\t\\t{\\n\\t\\t\\tvar serverName = this.serverNames[i];\\n\\n\\t\\t\\tthis.solveContractsFromServer(serverName);\\n\\t\\t}\\n\\t}\\n\\n\\tsolveContractsFromServer(serverName)\\n\\t{\\n\\t\\tvar contractNames = this.ns.ls(\\n\\t\\t\\tserverName,\\n\\t\\t\\t'.cct');\\n\\n\\t\\tfor (var j = 0; j < contractNames.length; j++)\\n\\t\\t{\\n\\t\\t\\tvar contractName = contractNames[j];\\n\\n\\t\\t\\tthis.solveContract(\\n\\t\\t\\t\\tserverName,\\n\\t\\t\\t\\tcontractName);\\n\\t\\t}\\n\\t}\\n\\n\\tsolveContract(\\n\\t\\tserverName,\\n\\t\\tcontractName)\\n\\t{\\n\\t\\tvar contractType = this.ns.codingcontract.getContractType(\\n\\t\\t\\tcontractName,\\n\\t\\t\\tserverName);\\n\\n\\t\\tvar contractData = this.ns.codingcontract.getData(\\n\\t\\t\\tcontractName,\\n\\t\\t\\tserverName);\\n\\n\\t\\tvar contractSolver = this.getContractSolver(\\n\\t\\t\\tcontractType,\\n\\t\\t\\tcontractData);\\n\\n\\t\\tif (contractSolver != null)\\n\\t\\t{\\n\\t\\t\\tvar result = contractSolver.solve();\\n\\n\\t\\t\\tthis.ns.print(\\n\\t\\t\\t\\t'Result of the contract \\\"'\\n\\t\\t\\t\\t+ contractName\\n\\t\\t\\t\\t+ '\\\" of a type \\\"'\\n\\t\\t\\t\\t+ contractType\\n\\t\\t\\t\\t+ '\\\" on the server \\\"'\\n\\t\\t\\t\\t+ serverName\\n\\t\\t\\t\\t+ '\\\" is: '\\n\\t\\t\\t\\t+ result);\\n\\n\\t\\t\\tif (this.sendResults)\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.ns.codingcontract.attempt(\\n\\t\\t\\t\\t\\tresult,\\n\\t\\t\\t\\t\\tcontractName,\\n\\t\\t\\t\\t\\tserverName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tgetContractSolver(\\n\\t\\tcontractType,\\n\\t\\tcontractData)\\n\\t{\\n\\t\\tthis.sendResults = true;\\n\\n\\t\\tvar contractSolver;\\n\\n\\t\\tswitch (contractType)\\n\\t\\t{\\n\\t\\t\\tcase 'Algorithmic Stock Trader I':\\n\\t\\t\\t\\n\\t\\t\\t\\tvar prices = contractData;\\n\\n\\t\\t\\t\\tcontractSolver = new StockPriceContractSolver(\\n\\t\\t\\t\\t\\t1,\\n\\t\\t\\t\\t\\tprices);\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'Algorithmic Stock Trader II':\\n\\n\\t\\t\\t\\tvar prices = contractData;\\n\\n\\t\\t\\t\\tcontractSolver = new StockPriceContractSolver(\\n\\t\\t\\t\\t\\tMath.floor(prices.length / 2),\\n\\t\\t\\t\\t\\tprices);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'Algorithmic Stock Trader III':\\n\\n\\t\\t\\t\\tvar prices = contractData;\\n\\n\\t\\t\\t\\tcontractSolver = new StockPriceContractSolver(\\n\\t\\t\\t\\t\\t2,\\n\\t\\t\\t\\t\\tprices);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'Algorithmic Stock Trader IV':\\n\\n\\t\\t\\t\\tvar numOfTransactions = contractData[0];\\n\\t\\t\\t\\tvar prices = contractData[1];\\n\\n\\t\\t\\t\\tcontractSolver = new StockPriceContractSolver(\\n\\t\\t\\t\\t\\tnumOfTransactions,\\n\\t\\t\\t\\t\\tprices);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'Sanitize Parentheses in Expression':\\n\\n\\t\\t\\t\\tvar inputExpression = contractData;\\n\\n\\t\\t\\t\\tcontractSolver = new SanitizeParenthesesContractSolver(inputExpression);\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'Find Largest Prime Factor':\\n\\n\\t\\t\\t\\tvar inputNumber = contractData;\\n\\n\\t\\t\\t\\tcontractSolver = new PrimeFactorContractSolver(inputNumber);\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'Subarray with Maximum Sum':\\n\\n\\t\\t\\t\\tvar numbers = contractData;\\n\\n\\t\\t\\t\\tcontractSolver = new MaxSumContractSolver(numbers);\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'Compression I: RLE Compression':\\n\\n\\t\\t\\t\\tvar inputExpression = contractData;\\n\\n\\t\\t\\t\\tcontractSolver = new RLECompressionContractSolver(inputExpression);\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'Compression II: LZ Decompression':\\n\\n\\t\\t\\t\\tvar inputExpression = contractData;\\n\\n\\t\\t\\t\\tcontractSolver = new LZDecompressionContractSolver(inputExpression);\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'Compression III: LZ Compression':\\n\\n\\t\\t\\t\\tvar inputExpression = contractData;\\n\\n\\t\\t\\t\\tcontractSolver = new LZCompressionContractSolver(inputExpression);\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'Generate IP Addresses':\\n\\n\\t\\t\\t\\tvar inputExpression = contractData;\\n\\n\\t\\t\\t\\tcontractSolver = new IPAddressesContractSolver(inputExpression);\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'Array Jumping Game':\\n\\n\\t\\t\\t\\tvar jumpLengths = contractData;\\n\\n\\t\\t\\t\\tcontractSolver = new ArrayJumpingContractSolver(\\n\\t\\t\\t\\t\\tjumpLengths,\\n\\t\\t\\t\\t\\tfalse);\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'Array Jumping Game II':\\n\\n\\t\\t\\t\\tvar jumpLengths = contractData;\\n\\n\\t\\t\\t\\tcontractSolver = new ArrayJumpingContractSolver(\\n\\t\\t\\t\\t\\tjumpLengths,\\n\\t\\t\\t\\t\\ttrue);\\n\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\treturn contractSolver;\\n\\t}\\n}\",\"filename\":\"/scripts/managers/ContractManager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///b59bb49f-3d2e-4ebe-8dac-cfe0eb982f2a\",\"moduleSequenceNumber\":252},{\"filename\":\"/scripts/contractSolvers/ArrayJumpingContractSolver.js\",\"url\":\"blob:file:///be3d6d80-67aa-4465-a9ab-01208fcf4166\",\"moduleSequenceNumber\":285},{\"filename\":\"/scripts/contractSolvers/IPAddressesContractSolver.js\",\"url\":\"blob:file:///dae0af6c-d465-437f-8f6b-d51fb6a68f69\",\"moduleSequenceNumber\":284},{\"filename\":\"/scripts/contractSolvers/LZCompressionContractSolver.js\",\"url\":\"blob:file:///31b9ea3a-0bfe-43b7-a774-b2d0254414aa\",\"moduleSequenceNumber\":288},{\"filename\":\"/scripts/contractSolvers/LZDecompressionContractSolver.js\",\"url\":\"blob:file:///beb3f8aa-4bc6-4065-ad76-1ab1faec34f7\",\"moduleSequenceNumber\":287},{\"filename\":\"/scripts/contractSolvers/RLECompressionContractSolver.js\",\"url\":\"blob:file:///8a1f4a60-23f9-485b-98a1-2d52633eb52e\",\"moduleSequenceNumber\":261},{\"filename\":\"/scripts/contractSolvers/MaxSumContractSolver.js\",\"url\":\"blob:file:///c87af6aa-b40a-4a53-bc75-3808b838062f\",\"moduleSequenceNumber\":260},{\"filename\":\"/scripts/contractSolvers/PrimeFactorContractSolver.js\",\"url\":\"blob:file:///1c0c74bd-523d-4afc-921f-704a3f33dd35\",\"moduleSequenceNumber\":259},{\"filename\":\"/scripts/contractSolvers/SanitizeParenthesesContractSolver.js\",\"url\":\"blob:file:///18cd49b3-da21-46ce-80e8-4bf01f4578a1\",\"moduleSequenceNumber\":258},{\"filename\":\"/scripts/contractSolvers/StockPriceContractSolver.js\",\"url\":\"blob:file:///adab815e-5529-4307-94e9-c772f4d873fd\",\"moduleSequenceNumber\":255},{\"filename\":\"/scripts/managers/Manager.js\",\"url\":\"blob:file:///b7a12379-5171-456f-8634-4d15ae8b5f04\",\"moduleSequenceNumber\":274},{\"filename\":\"/scripts/managers/ContractManager.js\",\"url\":\"blob:file:///20013f4b-dc5f-48b7-9c6a-66fe9eabc1e3\",\"moduleSequenceNumber\":497}],\"dependents\":[],\"ramUsage\":22,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**@param {NS} ns**/\\n\\nimport {Manager} from \\\"/scripts/managers/Manager.js\\\"\\n\\nimport {UpgradeHacknetNodeService} from \\\"/scripts/services/UpgradeHacknetNodeService.js\\\"\\n\\nexport async function main(ns)\\n{\\n\\tvar hacknetManager = new HacknetManager(ns);\\n\\n\\tawait hacknetManager.startOperation();\\n}\\n\\nexport class HacknetManager extends Manager\\n{\\n\\tfractionOfMoneyForHacknetUpgrades = 0.001;\\n\\n\\ttargetRevenueTime = 10800;\\n\\n\\tnewHacknetNodeTargetRevenueTimeProduction = 0;\\n\\n\\tmoneyForHacknetUpgrades = 0;\\n\\n\\tbitnodeMultiplier = 0.05;\\n\\n\\tconstructor(ns)\\n\\t{\\n\\t\\tsuper(ns);\\n\\t}\\n\\n\\tdisableLogs()\\n\\t{\\n\\t\\tthis.ns.disableLog('getHacknetMultipliers');\\n\\t\\tthis.ns.disableLog('getServerMoneyAvailable');\\n\\t\\tthis.ns.disableLog('hacknet.numNodes');\\n\\t\\tthis.ns.disableLog('hacknet.getPurchaseNodeCost');\\n\\t\\tthis.ns.disableLog('getHacknetMultipliers');\\n\\t\\tthis.ns.disableLog('hacknet.getNodeStats');\\n\\t\\tthis.ns.disableLog('hacknet.getLevelUpgradeCost');\\n\\t\\tthis.ns.disableLog('hacknet.getRamUpgradeCost');\\n\\t\\tthis.ns.disableLog('hacknet.getCoreUpgradeCost');\\n\\t}\\n\\n\\tinit()\\n\\t{\\n\\t\\tthis.newHacknetNodeTargetRevenueTimeProduction = 1.5 * this.ns.getHacknetMultipliers().production * bitnodeMultiplier * this.targetRevenueTime;\\n\\t}\\n\\n\\tasync manage()\\n\\t{\\n\\t\\tthis.updateInfo();\\n\\n\\t\\tthis.upgradeExistingHacknetNodes();\\n\\n\\t\\tthis.purchaseAndUpgradeNewHacknetNodes();\\n\\t}\\n\\n\\tupdateInfo()\\n\\t{\\n\\t\\tthis.waitTime = 60000;\\n\\n\\t\\tthis.moneyForHacknetUpgrades = this.ns.getServerMoneyAvailable('home') * this.fractionOfMoneyForHacknetUpgrades;\\n\\t}\\n\\n\\tupgradeExistingHacknetNodes()\\n\\t{\\n\\t\\tvar numOfNodes = this.ns.hacknet.numNodes();\\n\\n\\t\\tfor (var i = 0; i < numOfNodes; i++)\\n\\t\\t{\\n\\t\\t\\tthis.upgradeHacknetNode(i);\\n\\t\\t}\\n\\t}\\n\\n\\tpurchaseAndUpgradeNewHacknetNodes()\\n\\t{\\n\\t\\tvar purchaseNodeCost = this.ns.hacknet.getPurchaseNodeCost();\\n\\n\\t\\twhile (purchaseNodeCost <= this.moneyForHacknetUpgrades\\n\\t\\t\\t   && purchaseNodeCost <= this.newHacknetNodeTargetRevenueTimeProduction)\\n\\t\\t{\\n\\t\\t\\tvar hacknetNodeIndex = this.ns.hacknet.purchaseNode();\\n\\n\\t\\t\\tif (hacknetNodeIndex != -1)\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.ns.print(\\n\\t\\t\\t\\t\\t'Hacknet node with index \\\"'\\n\\t\\t\\t\\t\\t+ hacknetNodeIndex\\n\\t\\t\\t\\t\\t+ '\\\" has been purchased');\\n\\n\\t\\t\\t\\tthis.upgradeHacknetNode(hacknetNodeIndex);\\n\\n\\t\\t\\t\\tthis.waitTime = 1000;\\n\\t\\t\\t}\\n\\n\\t\\t\\tpurchaseNodeCost = this.ns.hacknet.getPurchaseNodeCost();\\n\\t\\t}\\n\\t}\\n\\n\\tupgradeHacknetNode(hacknetNodeIndex)\\n\\t{\\n\\t\\tvar upgradeHacknetNodeService = new UpgradeHacknetNodeService(\\n\\t\\t\\tthis.ns,\\n\\t\\t\\thacknetNodeIndex,\\n\\t\\t\\tthis.moneyForHacknetUpgrades,\\n\\t\\t\\tthis.targetRevenueTime);\\n\\n\\t\\tupgradeHacknetNodeService.startOperation();\\n\\n\\t\\tif (this.moneyForHacknetUpgrades != upgradeHacknetNodeService.remainingMoneyForUpgrades)\\n\\t\\t{\\n\\t\\t\\tthis.moneyForHacknetUpgrades = upgradeHacknetNodeService.remainingMoneyForUpgrades;\\n\\n\\t\\t\\tthis.waitTime = 1000;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/scripts/managers/HacknetManager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/services/UpgradeHacknetNodeService.js\",\"url\":\"blob:file:///c020f1fd-0720-49a2-9001-81dc873379ee\",\"moduleSequenceNumber\":279},{\"filename\":\"/scripts/managers/Manager.js\",\"url\":\"blob:file:///6d0fa894-3abf-4009-8ae5-510cd4590c27\",\"moduleSequenceNumber\":274},{\"filename\":\"/scripts/managers/HacknetManager.js\",\"url\":\"blob:file:///df3d6944-6e8d-4c99-816a-81300d1498ee\",\"moduleSequenceNumber\":496}],\"dependents\":[],\"ramUsage\":5.95,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHacknetMultipliers\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\t\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///193ab8b9-5a32-480a-bb89-a29ff3409644\",\"moduleSequenceNumber\":1756}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar hacknetNodeIndex = ns.args[0];\\n\\tvar moneyForUpgrades = ns.args[1];\\n\\tvar targetRevenueTime = ns.args[2];\\n\\n\\tvar upgradeHacknetNodeService = new UpgradeHacknetNodeService(\\n\\t\\tns,\\n\\t\\thacknetNodeIndex,\\n\\t\\tmoneyForUpgrades,\\n\\t\\ttargetRevenueTime);\\n\\n\\tupgradeHacknetNodeService.startOperation();\\n}\\n\\nexport class UpgradeHacknetNodeService\\n{\\n\\tns;\\n\\n\\thacknetNodeIndex = 0;\\n\\n\\tremainingMoneyForUpgrades = 0;\\n\\n\\ttargetRevenueTime = 0;\\n\\n\\thacknetMultipliers = null;\\n\\tnodeStats = null;\\n\\n\\tcurrentTargetRevenueTimeProduction = 0;\\n\\n\\tbitnodeMultiplier = 0.05;\\n\\n\\tconstructor(\\n\\t\\tns,\\n\\t\\thacknetNodeIndex,\\n\\t\\tmoneyForUpgrades,\\n\\t\\ttargetRevenueTime)\\n\\t{\\n\\t\\tthis.ns = ns;\\n\\n\\t\\tthis.hacknetNodeIndex = hacknetNodeIndex;\\n\\n\\t\\tthis.remainingMoneyForUpgrades = moneyForUpgrades;\\n\\n\\t\\tthis.targetRevenueTime = targetRevenueTime;\\n\\t}\\n\\n\\tstartOperation()\\n\\t{\\n\\t\\tthis.init();\\n\\n\\t\\tthis.upgradeHacknetNode();\\n\\t}\\n\\n\\tinit()\\n\\t{\\n\\t\\tthis.hacknetMultipliers = this.ns.getHacknetMultipliers();\\n\\n\\t\\tthis.nodeStats = this.ns.hacknet.getNodeStats(this.hacknetNodeIndex);\\n\\n\\t\\tthis.currentTargetRevenueTimeProduction = this.nodeStats.production * this.targetRevenueTime;\\n\\t}\\n\\n\\tupgradeHacknetNode()\\n\\t{\\n\\t\\tvar mustTryToUpgradeMore = true;\\n\\n\\t\\twhile (mustTryToUpgradeMore)\\n\\t\\t{\\n\\t\\t\\tthis.upgradeHacknetNodeLevel();\\n\\n\\t\\t\\tmustTryToUpgradeMore = this.upgradeHacknetNodeRAM();\\n\\n\\t\\t\\tmustTryToUpgradeMore =\\n\\t\\t\\t\\tthis.upgradeHacknetNodeCores()\\n\\t\\t\\t\\t|| mustTryToUpgradeMore;\\n\\t\\t}\\n\\t}\\n\\n\\tupgradeHacknetNodeLevel()\\n\\t{\\n\\t\\tvar upgraded = false;\\n\\n\\t\\tif (this.nodeStats.level < 200\\n\\t\\t\\t&& this.ns.hacknet.getLevelUpgradeCost(\\n\\t\\t\\t\\t\\tthis.hacknetNodeIndex,\\n\\t\\t\\t\\t\\t1) <= this.remainingMoneyForUpgrades)\\n\\t\\t{\\n\\t\\t\\tvar numOfUpgradesLeft = 200 - this.nodeStats.level;\\n\\n\\t\\t\\tfor (var numOfUpgrades = numOfUpgradesLeft; numOfUpgrades > 0; numOfUpgrades--)\\n\\t\\t\\t{\\n\\t\\t\\t\\tvar upgradeCost = this.ns.hacknet.getLevelUpgradeCost(\\n\\t\\t\\t\\t\\tthis.hacknetNodeIndex,\\n\\t\\t\\t\\t\\tnumOfUpgrades);\\n\\n\\t\\t\\t\\tif (upgradeCost <= this.remainingMoneyForUpgrades\\n\\t\\t\\t\\t\\t&& this.calculateTargetRevenueTimeHacknetNodeProduction(\\n\\t\\t\\t\\t\\t\\t\\tthis.nodeStats.level + numOfUpgrades,\\n\\t\\t\\t\\t\\t\\t\\tthis.nodeStats.ram,\\n\\t\\t\\t\\t\\t\\t\\tthis.nodeStats.cores) - this.currentTargetRevenueTimeProduction >= upgradeCost)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tif (this.ns.hacknet.upgradeLevel(\\n\\t\\t\\t\\t\\t\\t\\tthis.hacknetNodeIndex,\\n\\t\\t\\t\\t\\t\\t\\tnumOfUpgrades))\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tthis.remainingMoneyForUpgrades -= upgradeCost;\\n\\n\\t\\t\\t\\t\\t\\tthis.nodeStats = this.ns.hacknet.getNodeStats(this.hacknetNodeIndex);\\n\\n\\t\\t\\t\\t\\t\\tthis.currentTargetRevenueTimeProduction = this.nodeStats.production * this.targetRevenueTime;\\n\\n\\t\\t\\t\\t\\t\\tthis.ns.print(\\n\\t\\t\\t\\t\\t\\t\\t'For hacknet node '\\n\\t\\t\\t\\t\\t\\t\\t+ this.nodeStats.name\\n\\t\\t\\t\\t\\t\\t\\t+ ' level has been upgraded '\\n\\t\\t\\t\\t\\t\\t\\t+ numOfUpgrades\\n\\t\\t\\t\\t\\t\\t\\t+ ' times for '\\n\\t\\t\\t\\t\\t\\t\\t+ this.ns.formatNumber(upgradeCost));\\n\\n\\t\\t\\t\\t\\t\\tupgraded = true;\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn upgraded;\\n\\t}\\n\\n\\tupgradeHacknetNodeRAM()\\n\\t{\\n\\t\\tvar upgraded = false;\\n\\n\\t\\tif (this.nodeStats.ram < 64\\n\\t\\t\\t&& this.ns.hacknet.getRamUpgradeCost(\\n\\t\\t\\t\\t\\tthis.hacknetNodeIndex,\\n\\t\\t\\t\\t\\t1) <= this.remainingMoneyForUpgrades)\\n\\t\\t{\\n\\t\\t\\tvar currentNumOfRamUpgrades = Math.log2(this.nodeStats.ram);\\n\\n\\t\\t\\tvar numOfUpgradesLeft = 6 - currentNumOfRamUpgrades;\\n\\n\\t\\t\\tfor (var numOfUpgrades = numOfUpgradesLeft; numOfUpgrades > 0; numOfUpgrades--)\\n\\t\\t\\t{\\n\\t\\t\\t\\tvar upgradeCost = this.ns.hacknet.getRamUpgradeCost(\\n\\t\\t\\t\\t\\tthis.hacknetNodeIndex,\\n\\t\\t\\t\\t\\tnumOfUpgrades);\\n\\n\\t\\t\\t\\tif (upgradeCost <= this.remainingMoneyForUpgrades\\n\\t\\t\\t\\t\\t&& this.calculateTargetRevenueTimeHacknetNodeProduction(\\n\\t\\t\\t\\t\\t\\t\\tthis.nodeStats.level,\\n\\t\\t\\t\\t\\t\\t\\tMath.pow(\\n\\t\\t\\t\\t\\t\\t\\t\\t2,\\n\\t\\t\\t\\t\\t\\t\\t\\tcurrentNumOfRamUpgrades + numOfUpgrades),\\n\\t\\t\\t\\t\\t\\t\\tthis.nodeStats.cores) - this.currentTargetRevenueTimeProduction >= upgradeCost)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tif (this.ns.hacknet.upgradeRam(\\n\\t\\t\\t\\t\\t\\t\\tthis.hacknetNodeIndex,\\n\\t\\t\\t\\t\\t\\t\\tnumOfUpgrades))\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tthis.remainingMoneyForUpgrades -= upgradeCost;\\n\\n\\t\\t\\t\\t\\t\\tthis.nodeStats = this.ns.hacknet.getNodeStats(this.hacknetNodeIndex);\\n\\n\\t\\t\\t\\t\\t\\tthis.currentTargetRevenueTimeProduction = this.nodeStats.production * this.targetRevenueTime;\\n\\n\\t\\t\\t\\t\\t\\tthis.ns.print(\\n\\t\\t\\t\\t\\t\\t\\t'For hacknet node '\\n\\t\\t\\t\\t\\t\\t\\t+ this.nodeStats.name\\n\\t\\t\\t\\t\\t\\t\\t+ ' RAM has been upgraded '\\n\\t\\t\\t\\t\\t\\t\\t+ numOfUpgrades\\n\\t\\t\\t\\t\\t\\t\\t+ ' times for '\\n\\t\\t\\t\\t\\t\\t\\t+ this.ns.formatNumber(upgradeCost));\\n\\n\\t\\t\\t\\t\\t\\tupgraded = true;\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn upgraded;\\n\\t}\\n\\n\\tupgradeHacknetNodeCores()\\n\\t{\\n\\t\\tvar upgraded = false;\\n\\n\\t\\tif (this.nodeStats.cores < 16\\n\\t\\t\\t&& this.ns.hacknet.getCoreUpgradeCost(\\n\\t\\t\\t\\t\\tthis.hacknetNodeIndex,\\n\\t\\t\\t\\t\\t1) <= this.remainingMoneyForUpgrades)\\n\\t\\t{\\n\\t\\t\\tvar numOfUpgradesLeft = 16 - this.nodeStats.cores;\\n\\n\\t\\t\\tfor (var numOfUpgrades = numOfUpgradesLeft; numOfUpgrades > 0; numOfUpgrades--)\\n\\t\\t\\t{\\n\\t\\t\\t\\tvar upgradeCost = this.ns.hacknet.getCoreUpgradeCost(\\n\\t\\t\\t\\t\\tthis.hacknetNodeIndex,\\n\\t\\t\\t\\t\\tnumOfUpgrades);\\n\\n\\t\\t\\t\\tif (upgradeCost <= this.remainingMoneyForUpgrades\\n\\t\\t\\t\\t\\t&& this.calculateTargetRevenueTimeHacknetNodeProduction(\\n\\t\\t\\t\\t\\t\\t\\tthis.nodeStats.level,\\n\\t\\t\\t\\t\\t\\t\\tthis.nodeStats.ram,\\n\\t\\t\\t\\t\\t\\t\\tthis.nodeStats.cores + numOfUpgrades) - this.currentTargetRevenueTimeProduction >= upgradeCost)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tif (this.ns.hacknet.upgradeCore(\\n\\t\\t\\t\\t\\t\\t\\tthis.hacknetNodeIndex,\\n\\t\\t\\t\\t\\t\\t\\tnumOfUpgrades))\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tthis.remainingMoneyForUpgrades -= upgradeCost;\\n\\n\\t\\t\\t\\t\\t\\tthis.nodeStats = this.ns.hacknet.getNodeStats(this.hacknetNodeIndex);\\n\\n\\t\\t\\t\\t\\t\\tthis.currentTargetRevenueTimeProduction = this.nodeStats.production * this.targetRevenueTime;\\n\\n\\t\\t\\t\\t\\t\\tthis.ns.print(\\n\\t\\t\\t\\t\\t\\t\\t'For hacknet node '\\n\\t\\t\\t\\t\\t\\t\\t+ this.nodeStats.name\\n\\t\\t\\t\\t\\t\\t\\t+ ' cores have been upgraded '\\n\\t\\t\\t\\t\\t\\t\\t+ numOfUpgrades\\n\\t\\t\\t\\t\\t\\t\\t+ ' times for '\\n\\t\\t\\t\\t\\t\\t\\t+ this.ns.formatNumber(upgradeCost));\\n\\n\\t\\t\\t\\t\\t\\tupgraded = true;\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn upgraded;\\n\\t}\\n\\n\\tcalculateTargetRevenueTimeHacknetNodeProduction(\\n\\t\\tlevel,\\n\\t\\tram,\\n\\t\\tcores)\\n\\t{\\n\\t\\tvar ramMultiplier = Math.pow(1.035, (ram - 1));\\n\\t\\tvar coresMultiplier = 1 + 0.167 * (cores - 1);\\n\\n\\t\\treturn 1.5 * level * ramMultiplier * coresMultiplier * this.hacknetMultipliers.production * bitnodeMultiplier * this.targetRevenueTime;\\n\\t}\\n}\",\"filename\":\"/scripts/services/UpgradeHacknetNodeService.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.85,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHacknetMultipliers\",\"cost\":0.25},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport {ServerInfoBuilderService} from \\\"/scripts/services/ServerInfoBuilderService.js\\\"\\n\\nimport {getAllServerNames} from \\\"/scripts/util/util.js\\\"\\n\\nexport async function main(ns)\\n{\\n\\tvar serverName = ns.args[0];\\n\\tvar filter = ns.args[1];\\n\\n\\tvar serverAnalyzerService = new ServerAnalyzerService(\\n\\t\\tns,\\n\\t\\tserverName,\\n\\t\\tfilter);\\n\\n\\tserverAnalyzerService.startOperation();\\n}\\n\\nexport class ServerAnalyzerService\\n{\\n\\tns;\\n\\n\\tserverName = '';\\n\\n\\tfilter = '';\\n\\n\\tnumOfHackablePorts = 0;\\n\\n\\tserverInfoModels = [];\\n\\n\\tanalysisData = '';\\n\\n\\tconstructor(\\n\\t\\tns,\\n\\t\\tserverName,\\n\\t\\tfilter)\\n\\t{\\n\\t\\tthis.ns = ns;\\n\\n\\t\\tthis.serverName = serverName;\\n\\n\\t\\tthis.filter = filter;\\n\\t}\\n\\n\\tstartOperation()\\n\\t{\\n\\t\\tthis.init();\\n\\n\\t\\tthis.buildServerInfoModels();\\n\\n\\t\\tthis.buildAnalysisData();\\n\\n\\t\\tthis.displayAnalysisData();\\n\\t}\\n\\n\\tinit()\\n\\t{\\n\\t\\tif (this.ns.fileExists('BruteSSH.exe'))\\n\\t\\t{\\n\\t\\t\\tthis.numOfHackablePorts++;\\n\\t\\t}\\n\\n\\t\\tif (this.ns.fileExists('FTPCrack.exe'))\\n\\t\\t{\\n\\t\\t\\tthis.numOfHackablePorts++;\\n\\t\\t}\\n\\n\\t\\tif (this.ns.fileExists('relaySMTP.exe'))\\n\\t\\t{\\n\\t\\t\\tthis.numOfHackablePorts++;\\n\\t\\t}\\n\\n\\t\\tif (this.ns.fileExists('HTTPWorm.exe'))\\n\\t\\t{\\n\\t\\t\\tthis.numOfHackablePorts++;\\n\\t\\t}\\n\\n\\t\\tif (this.ns.fileExists('SQLInject.exe'))\\n\\t\\t{\\n\\t\\t\\tthis.numOfHackablePorts++;\\n\\t\\t}\\n\\t}\\n\\n\\tbuildServerInfoModels()\\n\\t{\\n\\t\\tthis.serverInfoModels = [];\\n\\n\\t\\tvar serverNames = this.serverName == 'all' ?\\n\\t\\t\\tthis.getFilteredServerList() :\\n\\t\\t\\t[this.serverName];\\n\\n\\t\\tfor (var i = 0; i < serverNames.length; i++)\\n\\t\\t{\\n\\t\\t\\tvar serverInfoModel = this.buildServerInfoModel(serverNames[i]);\\n\\n\\t\\t\\tthis.serverInfoModels.push(serverInfoModel);\\n\\t\\t}\\n\\t}\\n\\n\\tgetFilteredServerList()\\n\\t{\\n\\t\\tvar filteredServerList = [];\\n\\n\\t\\tvar serverNames = getAllServerNames(this.ns).sort();\\n\\n\\t\\tif (this.filter)\\n\\t\\t{\\n\\t\\t\\tfor (var i = 0; i < serverNames.length; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tvar serverName = serverNames[i];\\n\\n\\t\\t\\t\\tif (this.serverMatchesFilter(serverName))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tfilteredServerList.push(serverName);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tfilteredServerList = serverNames;\\n\\t\\t}\\n\\n\\t\\treturn filteredServerList;\\n\\t}\\n\\n\\tserverMatchesFilter(serverName)\\n\\t{\\n\\t\\tvar ret = false;\\n\\n\\t\\tswitch (this.filter)\\n\\t\\t{\\n\\t\\t\\tcase 'own':\\n\\n\\t\\t\\t\\tif (serverName == 'home'\\n\\t\\t\\t\\t\\t|| serverName.search('hack') != -1)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tret = true;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'res':\\n\\n\\t\\t\\t\\tif (this.ns.hasRootAccess(serverName)\\n\\t\\t\\t\\t\\t&& this.ns.getServerMaxRam(serverName) > 0\\n\\t\\t\\t\\t\\t&& this.ns.getServerMaxMoney(serverName) == 0)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tret = true;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'ext':\\n\\n\\t\\t\\t\\tif (this.ns.hasRootAccess(serverName)\\n\\t\\t\\t\\t\\t&& serverName != 'home'\\n\\t\\t\\t\\t\\t&& serverName.search('hack') == -1)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tret = true;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'tgt':\\n\\n\\t\\t\\t\\tif (this.ns.hasRootAccess(serverName)\\n\\t\\t\\t\\t\\t&& this.ns.getServerMaxMoney(serverName) > 0)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tret = true;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'psp':\\n\\n\\t\\t\\t\\tif (!this.ns.hasRootAccess(serverName)\\n\\t\\t\\t\\t\\t&& this.ns.getServerRequiredHackingLevel(serverName) > this.ns.getHackingLevel()\\n\\t\\t\\t\\t\\t&& this.ns.getServerNumPortsRequired(serverName) > this.getNumOfHackablePorts)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tret = true;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\treturn ret;\\n\\t}\\n\\n\\tbuildServerInfoModel(serverName)\\n\\t{\\n\\t\\tvar serverInfoBuilderService = new ServerInfoBuilderService(\\n\\t\\t\\tthis.ns,\\n\\t\\t\\tserverName);\\n\\n\\t\\tserverInfoBuilderService.startOperation();\\n\\n\\t\\treturn serverInfoBuilderService.serverInfoModel;\\n\\t}\\n\\n\\tbuildAnalysisData()\\n\\t{\\n\\t\\tthis.addNextRowSymbol();\\n\\n\\t\\tthis.addLine(111);\\n\\n\\t\\tthis.addNextRowSymbol();\\n\\n\\t\\tthis.addAnalysisDataHeader();\\n\\n\\t\\tthis.addNextRowSymbol();\\n\\n\\t\\tthis.addLine(111);\\n\\n\\t\\tfor (var i = 0; i < this.serverInfoModels.length; i++)\\n\\t\\t{\\n\\t\\t\\tthis.addNextRowSymbol();\\n\\n\\t\\t\\tthis.addAnalysisDataLine(this.serverInfoModels[i]);\\n\\t\\t}\\n\\n\\t\\tthis.addNextRowSymbol();\\n\\n\\t\\tthis.addLine(111);\\n\\t}\\n\\n\\taddAnalysisDataHeader()\\n\\t{\\n\\t\\tthis.addText('|');\\n\\n\\t\\tthis.addText(\\n\\t\\t\\t'Name',\\n\\t\\t\\t18);\\n\\n\\t\\tthis.addText('|');\\n\\n\\t\\tthis.addText(\\n\\t\\t\\t'Sec.',\\n\\t\\t\\t12);\\n\\n\\t\\tthis.addText('|');\\n\\n\\t\\tthis.addText(\\n\\t\\t\\t'Min sec.',\\n\\t\\t\\t12);\\n\\n\\t\\tthis.addText('|');\\n\\n\\t\\tthis.addText(\\n\\t\\t\\t'Money',\\n\\t\\t\\t12);\\n\\n\\t\\tthis.addText('|');\\n\\n\\t\\tthis.addText(\\n\\t\\t\\t'Max money',\\n\\t\\t\\t12);\\n\\n\\t\\tthis.addText('|');\\n\\n\\t\\tthis.addText(\\n\\t\\t\\t'Free RAM',\\n\\t\\t\\t12);\\n\\n\\t\\tthis.addText('|');\\n\\n\\t\\tthis.addText(\\n\\t\\t\\t'Max RAM',\\n\\t\\t\\t12);\\n\\n\\t\\tthis.addText('|');\\n\\n\\t\\tthis.addText(\\n\\t\\t\\t'RAM %',\\n\\t\\t\\t12);\\n\\n\\t\\tthis.addText('|');\\n\\t}\\n\\n\\taddAnalysisDataLine(serverInfoModel)\\n\\t{\\n\\t\\tthis.addText('|');\\n\\n\\t\\tthis.addText(\\n\\t\\t\\tserverInfoModel.name,\\n\\t\\t\\t18);\\n\\n\\t\\tthis.addText('|');\\n\\n\\t\\tthis.addText(\\n\\t\\t\\tserverInfoModel.securityLevel.toFixed(3),\\n\\t\\t\\t12);\\n\\n\\t\\tthis.addText('|');\\n\\n\\t\\tthis.addText(\\n\\t\\t\\tserverInfoModel.minSecurityLevel.toFixed(3),\\n\\t\\t\\t12);\\n\\n\\t\\tthis.addText('|');\\n\\n\\t\\tthis.addText(\\n\\t\\t\\tthis.ns.formatNumber(serverInfoModel.moneyAvailable),\\n\\t\\t\\t12);\\n\\n\\t\\tthis.addText('|');\\n\\n\\t\\tthis.addText(\\n\\t\\t\\tthis.ns.formatNumber(serverInfoModel.maxMoney),\\n\\t\\t\\t12);\\n\\n\\t\\tthis.addText('|');\\n\\n\\t\\tthis.addText(\\n\\t\\t\\tthis.ns.formatRam(serverInfoModel.freeRAM),\\n\\t\\t\\t12);\\n\\n\\t\\tthis.addText('|');\\n\\n\\t\\tthis.addText(\\n\\t\\t\\tthis.ns.formatRam(serverInfoModel.maxRAM),\\n\\t\\t\\t12);\\n\\n\\t\\tthis.addText('|');\\n\\n\\t\\tthis.addText(\\n\\t\\t\\tthis.ns.formatPercent(\\n\\t\\t\\t\\tserverInfoModel.maxRAM > 0 ?\\n\\t\\t\\t\\t\\tserverInfoModel.freeRAM / serverInfoModel.maxRAM :\\n\\t\\t\\t\\t\\t0),\\n\\t\\t\\t12);\\n\\n\\t\\tthis.addText('|');\\n\\t}\\n\\n\\taddNextRowSymbol()\\n\\t{\\n\\t\\tthis.analysisData += '\\\\n';\\n\\t}\\n\\n\\taddLine(length)\\n\\t{\\n\\t\\tfor (var i = 0; i < length; i++)\\n\\t\\t{\\n\\t\\t\\tthis.analysisData += '-';\\n\\t\\t}\\n\\t}\\n\\n\\taddText(\\n\\t\\ttext,\\n\\t\\tsize = text.length)\\n\\t{\\n\\t\\tvar spacesBefore = '';\\n\\t\\tvar spacesAfter = '';\\n\\n\\t\\tvar textLength = text.length;\\n\\n\\t\\tif (size > textLength)\\n\\t\\t{\\n\\t\\t\\tvar sizeDifference = size - textLength;\\n\\n\\t\\t\\tvar numOfSpacesBefore = Math.ceil(sizeDifference / 2);\\n\\n\\t\\t\\tfor (var i = 0; i < numOfSpacesBefore; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tspacesBefore += ' ';\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar numOfSpacesAfter = sizeDifference - numOfSpacesBefore;\\n\\n\\t\\t\\tfor (var i = 0; i < numOfSpacesAfter; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tspacesAfter += ' ';\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthis.analysisData += spacesBefore + text + spacesAfter;\\n\\t}\\n\\n\\tdisplayAnalysisData()\\n\\t{\\n\\t\\tthis.ns.tprint(this.analysisData);\\n\\t}\\n}\",\"filename\":\"/scripts/services/ServerAnalyzerService.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/util/util.js\",\"url\":\"blob:file:///c6458060-c75e-4fff-9fcb-07740da95d67\",\"moduleSequenceNumber\":1915},{\"filename\":\"/scripts/models/ServerInfoModel.js\",\"url\":\"blob:file:///062f90f6-0fe1-441d-9532-920710ce166c\",\"moduleSequenceNumber\":1944},{\"filename\":\"/scripts/services/ServerInfoBuilderService.js\",\"url\":\"blob:file:///4219adac-5dbd-4954-af84-f309716e9302\",\"moduleSequenceNumber\":1945},{\"filename\":\"/scripts/services/ServerAnalyzerService.js\",\"url\":\"blob:file:///b37cca0d-fcf6-4eb1-ac6a-9b09449cd749\",\"moduleSequenceNumber\":1953}],\"dependents\":[],\"ramUsage\":2.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport class ServerInfoModel\\n{\\n\\tname = '';\\n\\n\\tsecurityLevel = 0;\\n\\tminSecurityLevel = 0;\\n\\n\\tmoneyAvailable = 0;\\n\\tmaxMoney = 0;\\n\\n\\tfreeRAM = 0;\\n\\tmaxRAM = 0;\\n}\",\"filename\":\"/scripts/models/ServerInfoModel.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nimport {ServerInfoModel} from \\\"/scripts/models/ServerInfoModel.js\\\"\\n\\nexport class ServerInfoBuilderService\\n{\\n\\tns;\\n\\n\\tserverName = '';\\n\\n\\tserverInfoModel = null;\\n\\n\\tconstructor(\\n\\t\\tns,\\n\\t\\tserverName)\\n\\t{\\n\\t\\tthis.ns = ns;\\n\\n\\t\\tthis.serverName = serverName;\\n\\n\\t\\tthis.serverInfoModel = new ServerInfoModel();\\n\\t}\\n\\n\\tstartOperation()\\n\\t{\\n\\t\\tthis.addBasicInfo();\\n\\t\\tthis.addSecurityLevelInfo();\\n\\t\\tthis.addMoneyInfo();\\n\\t\\tthis.addRAMInfo();\\n\\t}\\n\\n\\taddBasicInfo()\\n\\t{\\n\\t\\tthis.serverInfoModel.name = this.serverName;\\n\\t}\\n\\n\\taddSecurityLevelInfo()\\n\\t{\\n\\t\\tthis.serverInfoModel.securityLevel = this.ns.getServerSecurityLevel(this.serverName);\\n\\t\\tthis.serverInfoModel.minSecurityLevel = this.ns.getServerMinSecurityLevel(this.serverName);\\n\\t}\\n\\n\\taddMoneyInfo()\\n\\t{\\n\\t\\tthis.serverInfoModel.moneyAvailable = this.ns.getServerMoneyAvailable(this.serverName);\\n\\t\\tthis.serverInfoModel.maxMoney = this.ns.getServerMaxMoney(this.serverName);\\n\\t}\\n\\n\\taddRAMInfo()\\n\\t{\\n\\t\\tvar serverMaxRam = this.ns.getServerMaxRam(this.serverName);\\n\\n\\t\\tthis.serverInfoModel.maxRAM = serverMaxRam;\\n\\n\\t\\tvar serverFreeRAM = serverMaxRam - this.ns.getServerUsedRam(this.serverName);\\n\\n\\t\\tthis.serverInfoModel.freeRAM = serverFreeRAM;\\n\\t}\\n}\",\"filename\":\"/scripts/services/ServerInfoBuilderService.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns)\\n{\\n\\tvar serverName = ns.args[0];\\n\\tvar ram = ns.args[1];\\n\\n\\tif (ram == 'max')\\n\\t{\\n\\t\\tram = ns.getPurchasedServerMaxRam();\\n\\t}\\n\\telse if (!ram)\\n\\t{\\n\\t\\tram = ns.getServerMaxRam(serverName) * 2;\\n\\t}\\n\\n\\tvar upgradeCost = ns.getPurchasedServerUpgradeCost(\\n\\t\\tserverName,\\n\\t\\tram);\\n\\n\\tif (ns.upgradePurchasedServer(\\n\\t\\t\\tserverName,\\n\\t\\t\\tram))\\n\\t{\\n\\t\\tns.tprint(\\n\\t\\t\\t'Server '\\n\\t\\t\\t+ serverName\\n\\t\\t\\t+ ' has been upgraded to '\\n\\t\\t\\t+ ns.formatRam(ram)\\n\\t\\t\\t+ ' RAM for '\\n\\t\\t\\t+ ns.formatNumber(upgradeCost));\\n\\t}\\n\\telse\\n\\t{\\n\\t\\tns.tprint(\\n\\t\\t\\t'Server '\\n\\t\\t\\t+ serverName\\n\\t\\t\\t+ ' has not been upgraded to '\\n\\t\\t\\t+ ns.formatRam(ram)\\n\\t\\t\\t+ ' RAM');\\n\\t}\\n}\",\"filename\":\"/scripts/old/upgradeServer.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/upgradeServer.js\",\"url\":\"blob:file:///0c3b94bd-acd6-4dec-824e-2983edee0390\",\"moduleSequenceNumber\":7393}],\"dependents\":[],\"ramUsage\":2.05,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":108,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerUpgradeCost\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"upgradePurchasedServer\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport class IPAddressesContractSolver\\n{\\n\\tinputExpression = '';\\n\\n\\tipAddresses = [];\\n\\n\\tconstructor(inputExpression)\\n\\t{\\n\\t\\tthis.inputExpression = inputExpression;\\n\\t}\\n\\n\\tsolve()\\n\\t{\\n\\t\\tthis.buildIPAddresses();\\n\\n\\t\\treturn this.buildOutputExpression();\\n\\t}\\n\\n\\tbuildIPAddresses()\\n\\t{\\n\\t\\tif (this.inputExpression.length >= 4\\n\\t\\t\\t&& this.inputExpression.length <= 12)\\n\\t\\t{\\n\\t\\t\\tthis.recursiveBuildSegments();\\n\\t\\t}\\n\\t}\\n\\n\\trecursiveBuildSegments(\\n\\t\\tsegmentNum = 1,\\n\\t\\tinputExpression = this.inputExpression,\\n\\t\\tunfinishedIPAddress = '')\\n\\t{\\n\\t\\tif (segmentNum == 4)\\n\\t\\t{\\n\\t\\t\\tif (this.validateSegment(inputExpression))\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.ipAddresses.push(unfinishedIPAddress + inputExpression);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tfor (var i = 1; i < 4; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tvar segment = inputExpression.substr(\\n\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\ti);\\n\\n\\t\\t\\t\\tif (!this.validateSegment(segment))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tthis.recursiveBuildSegments(\\n\\t\\t\\t\\t\\tsegmentNum + 1,\\n\\t\\t\\t\\t\\tinputExpression.substr(\\n\\t\\t\\t\\t\\t\\ti,\\n\\t\\t\\t\\t\\t\\tinputExpression.length - i),\\n\\t\\t\\t\\t\\tunfinishedIPAddress + segment + '.');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tvalidateSegment(segment)\\n\\t{\\n\\t\\tvar ret = segment != '';\\n\\n\\t\\tif (ret\\n\\t\\t\\t&& segment.length > 1)\\n\\t\\t{\\n\\t\\t\\tret =\\n\\t\\t\\t\\tsegment.substr(\\n\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t1) != '0'\\n\\t\\t\\t\\t&& parseInt(segment) <= 255\\n\\t\\t}\\n\\n\\t\\treturn ret;\\n\\t}\\n\\n\\tbuildOutputExpression()\\n\\t{\\n\\t\\tvar outputExpression = '[';\\n\\n\\t\\tvar firstIPAddress = true;\\n\\n\\t\\tfor (var i = 0; i < this.ipAddresses.length; i++)\\n\\t\\t{\\n\\t\\t\\tvar ipAddress = this.ipAddresses[i];\\n\\n\\t\\t\\tif (!firstIPAddress)\\n\\t\\t\\t{\\n\\t\\t\\t\\toutputExpression += ', ';\\n\\t\\t\\t}\\n\\n\\t\\t\\toutputExpression +=\\n\\t\\t\\t\\t'\\\"'\\n\\t\\t\\t\\t+ ipAddress\\n\\t\\t\\t\\t+ '\\\"';\\n\\n\\t\\t\\tfirstIPAddress = false;\\n\\t\\t}\\n\\n\\t\\toutputExpression += ']';\\n\\n\\t\\treturn outputExpression;\\n\\t}\\n}\",\"filename\":\"/scripts/contractSolvers/IPAddressesContractSolver.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/contractSolvers/IPAddressesContractSolver.js\",\"url\":\"blob:file:///baa06de9-7400-4e7b-81fb-e1ecc36d2bad\",\"moduleSequenceNumber\":27418}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport class ArrayJumpingContractSolver\\n{\\n\\tjumpLengths = [];\\n\\n\\treturnMinJumpsRequired = false;\\n\\n\\tminJumpsRequired = 0;\\n\\n\\tconstructor(\\n\\t\\tjumpLengths,\\n\\t\\treturnMinJumpsRequired)\\n\\t{\\n\\t\\tthis.jumpLengths = jumpLengths;\\n\\n\\t\\tthis.returnMinJumpsRequired = returnMinJumpsRequired;\\n\\t}\\n\\n\\tsolve()\\n\\t{\\n\\t\\tthis.recursiveTryToReachTheEnd();\\n\\n\\t\\treturn this.buildOutputExpression();\\n\\t}\\n\\n\\trecursiveTryToReachTheEnd(\\n\\t\\tstartingPositionIndex = 0,\\n\\t\\tcurrentJumpNum = 1)\\n\\t{\\n\\t\\tif (this.canReachTheEndFromPosition(startingPositionIndex))\\n\\t\\t{\\n\\t\\t\\tif (this.minJumpsRequired == 0\\n\\t\\t\\t\\t|| currentJumpNum < this.minJumpsRequired)\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.minJumpsRequired = currentJumpNum;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tfor (var i = 1; i <= this.jumpLengths[startingPositionIndex]; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.recursiveTryToReachTheEnd(\\n\\t\\t\\t\\t\\tstartingPositionIndex + i,\\n\\t\\t\\t\\t\\tcurrentJumpNum + 1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tcanReachTheEndFromPosition(positionIndex)\\n\\t{\\n\\t\\treturn positionIndex + this.jumpLengths[positionIndex] >= this.jumpLengths.length - 1;\\n\\t}\\n\\n\\tbuildOutputExpression()\\n\\t{\\n\\t\\treturn this.returnMinJumpsRequired ?\\n\\t\\t\\tthis.minJumpsRequired :\\n\\t\\t\\tMath.min(\\n\\t\\t\\t\\tthis.minJumpsRequired,\\n\\t\\t\\t\\t1);\\n\\t}\\n}\",\"filename\":\"/scripts/contractSolvers/ArrayJumpingContractSolver.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/contractSolvers/ArrayJumpingContractSolver.js\",\"url\":\"blob:file:///d0961eec-790a-4d74-99b5-9da1054b075d\",\"moduleSequenceNumber\":8977}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tns.toast(\\n\\t\\tns.heart.break(),\\n\\t\\t'info');\\n}\",\"filename\":\"/scripts/karma.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/karma.js\",\"url\":\"blob:file:///c5928cb4-16eb-4aa3-b34a-962dceb8135d\",\"moduleSequenceNumber\":295}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport class LZDecompressionContractSolver\\n{\\n\\tinputExpression = '';\\n\\n\\toutputExpression = '';\\n\\n\\tconstructor(inputExpression)\\n\\t{\\n\\t\\tthis.inputExpression = inputExpression;\\n\\t}\\n\\n\\tsolve()\\n\\t{\\n\\t\\tthis.recursiveBuildOutputExpression();\\n\\n\\t\\treturn this.outputExpression;\\n\\t}\\n\\n\\trecursiveBuildOutputExpression(\\n\\t\\tinputExpression = this.inputExpression,\\n\\t\\tisDirectChunk = true)\\n\\t{\\n\\t\\tif (inputExpression != '')\\n\\t\\t{\\n\\t\\t\\tvar chunkSize = 1;\\n\\n\\t\\t\\tvar length = parseInt(\\n\\t\\t\\t\\tinputExpression.substr(\\n\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t1));\\n\\n\\t\\t\\tif (length != 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (isDirectChunk)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tthis.decodeDirectChunk(\\n\\t\\t\\t\\t\\t\\tinputExpression,\\n\\t\\t\\t\\t\\t\\tlength);\\n\\n\\t\\t\\t\\t\\tchunkSize += length;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tthis.decodeReferenceChunk(\\n\\t\\t\\t\\t\\t\\tinputExpression,\\n\\t\\t\\t\\t\\t\\tlength);\\n\\n\\t\\t\\t\\t\\tchunkSize++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.recursiveBuildOutputExpression(\\n\\t\\t\\t\\tinputExpression.substr(\\n\\t\\t\\t\\t\\tchunkSize,\\n\\t\\t\\t\\t\\tinputExpression.length - chunkSize),\\n\\t\\t\\t\\t!isDirectChunk);\\n\\t\\t}\\n\\t}\\n\\n\\tdecodeDirectChunk(\\n\\t\\tinputExpression,\\n\\t\\tlength)\\n\\t{\\n\\t\\tthis.outputExpression += inputExpression.substr(\\n\\t\\t\\t1,\\n\\t\\t\\tlength);\\n\\t}\\n\\n\\tdecodeReferenceChunk(\\n\\t\\tinputExpression,\\n\\t\\tlength)\\n\\t{\\n\\t\\tvar numOfPlacesBefore = parseInt(\\n\\t\\t\\tinputExpression.substr(\\n\\t\\t\\t\\t1,\\n\\t\\t\\t\\t1));\\n\\n\\t\\tfor (var i = 0; i < length; i++)\\n\\t\\t{\\n\\t\\t\\tthis.outputExpression += this.outputExpression.substr(\\n\\t\\t\\t\\tthis.outputExpression.length - numOfPlacesBefore,\\n\\t\\t\\t\\t1);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/scripts/contractSolvers/LZDecompressionContractSolver.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/contractSolvers/LZDecompressionContractSolver.js\",\"url\":\"blob:file:///b4252ed3-88b2-4ac3-9173-0d9dcfedce61\",\"moduleSequenceNumber\":24219}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport class LZCompressionContractSolver\\n{\\n\\tinputExpression = '';\\n\\n\\toutputExpression = '';\\n\\n\\tconstructor(inputExpression)\\n\\t{\\n\\t\\tthis.inputExpression = inputExpression;\\n\\t}\\n\\n\\tsolve()\\n\\t{\\n\\t\\tthis.recursiveEncodeDirect();\\n\\n\\t\\treturn this.outputExpression;\\n\\t}\\n\\n\\trecursiveEncodeDirect(\\n\\t\\tstartingIndex = 0,\\n\\t\\toutputExpression = '',\\n\\t\\tcanSkipChunk = false)\\n\\t{\\n\\t\\tif (!this.tryToSaveEncoding(\\n\\t\\t\\t\\tstartingIndex,\\n\\t\\t\\t\\toutputExpression))\\n\\t\\t{\\n\\t\\t\\tvar bestEncodingLengthFound = 0;\\n\\n\\t\\t\\tvar bestEncodedLengthFound = 0;\\n\\n\\t\\t\\tvar bestOutputExpression = '';\\n\\n\\t\\t\\tvar canSkipNextChunk = true;\\n\\n\\t\\t\\tvar minChunkLength = canSkipChunk ?\\n\\t\\t\\t\\t0 :\\n\\t\\t\\t\\t1;\\n\\n\\t\\t\\tvar maxChunkLength = Math.min(\\n\\t\\t\\t\\t9,\\n\\t\\t\\t\\tthis.inputExpression.length - startingIndex);\\n\\n\\t\\t\\tfor (var i = minChunkLength; i <= maxChunkLength; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tvar directOutputExpression = '' + i;\\n\\n\\t\\t\\t\\tvar textToEncode = this.inputExpression.substr(\\n\\t\\t\\t\\t\\tstartingIndex,\\n\\t\\t\\t\\t\\ti);\\n\\n\\t\\t\\t\\tdirectOutputExpression += textToEncode;\\n\\n\\t\\t\\t\\tvar encodingLength = directOutputExpression.length;\\n\\t\\t\\t\\tvar encodedLength = i;\\n\\t\\t\\t\\tvar newOutputExpression = directOutputExpression;\\n\\n\\t\\t\\t\\tif (this.tryToSaveEncoding(\\n\\t\\t\\t\\t\\t\\tstartingIndex + i,\\n\\t\\t\\t\\t\\t\\toutputExpression + newOutputExpression))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tif (bestEncodingLengthFound == 0\\n\\t\\t\\t\\t\\t\\t|| (bestEncodedLengthFound / bestEncodingLengthFound) < (encodedLength / encodingLength))\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tbestEncodingLengthFound = encodingLength;\\n\\n\\t\\t\\t\\t\\t\\tbestEncodedLengthFound = encodedLength;\\n\\n\\t\\t\\t\\t\\t\\tbestOutputExpression = newOutputExpression;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tvar referenceLength = 0;\\n\\t\\t\\t\\t\\tvar referenceOutputExpression = '';\\n\\n\\t\\t\\t\\t\\t[referenceLength, referenceOutputExpression] = this.encodeReference(\\n\\t\\t\\t\\t\\t\\tstartingIndex + i,\\n\\t\\t\\t\\t\\t\\ti != 0);\\n\\n\\t\\t\\t\\t\\tencodingLength += referenceOutputExpression.length;\\n\\t\\t\\t\\t\\tencodedLength += referenceLength;\\n\\t\\t\\t\\t\\tnewOutputExpression += referenceOutputExpression;\\n\\n\\t\\t\\t\\t\\tif (i + referenceLength > 0\\n\\t\\t\\t\\t\\t\\t&& (bestEncodingLengthFound == 0\\n\\t\\t\\t\\t\\t\\t || (bestEncodedLengthFound / bestEncodingLengthFound) < (encodedLength / encodingLength)))\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tbestEncodingLengthFound = encodingLength;\\n\\n\\t\\t\\t\\t\\t\\tbestEncodedLengthFound = encodedLength;\\n\\n\\t\\t\\t\\t\\t\\tbestOutputExpression = newOutputExpression;\\n\\n\\t\\t\\t\\t\\t\\tcanSkipNextChunk = referenceLength != 0;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.recursiveEncodeDirect(\\n\\t\\t\\t\\tstartingIndex + bestEncodedLengthFound,\\n\\t\\t\\t\\toutputExpression + bestOutputExpression,\\n\\t\\t\\t\\tcanSkipNextChunk);\\n\\t\\t}\\n\\t}\\n\\n\\ttryToSaveEncoding(\\n\\t\\tstartingIndex,\\n\\t\\toutputExpression)\\n\\t{\\n\\t\\tvar ret = false;\\n\\n\\t\\tif (startingIndex == this.inputExpression.length\\n\\t\\t\\t&& outputExpression != '')\\n\\t\\t{\\n\\t\\t\\tif (this.outputExpression.length == 0\\n\\t\\t\\t\\t|| this.outputExpression.length > outputExpression.length)\\n\\t\\t\\t{\\n\\t\\t\\t\\tthis.outputExpression = outputExpression;\\n\\t\\t\\t}\\n\\n\\t\\t\\tret = true;\\n\\t\\t}\\n\\n\\t\\treturn ret;\\n\\t}\\n\\n\\tencodeReference(\\n\\t\\tstartingIndex = 0,\\n\\t\\tcanSkipChunk = false)\\n\\t{\\n\\t\\tvar bestLengthFound = 0;\\n\\t\\tvar referenceExpression = '';\\n\\n\\t\\tvar minChunkLength = canSkipChunk ?\\n\\t\\t\\t0 :\\n\\t\\t\\t1;\\n\\n\\t\\tvar maxChunkLength = Math.min(\\n\\t\\t\\t9,\\n\\t\\t\\tthis.inputExpression.length - startingIndex);\\n\\n\\t\\tfor (var i = maxChunkLength; i >= minChunkLength; i--)\\n\\t\\t{\\n\\t\\t\\treferenceExpression = '' + i;\\n\\n\\t\\t\\tif (i == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tbestLengthFound = i;\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tvar positionsBackFound = 0;\\n\\n\\t\\t\\t\\tvar textToEncode = this.inputExpression.substr(\\n\\t\\t\\t\\t\\tstartingIndex,\\n\\t\\t\\t\\t\\ti);\\n\\n\\t\\t\\t\\tvar maxPositionsBack = Math.min(\\n\\t\\t\\t\\t\\t9,\\n\\t\\t\\t\\t\\tstartingIndex);\\n\\n\\t\\t\\t\\tfor (var j = 1; j <= maxPositionsBack; j++)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tvar referenceText = this.inputExpression.substr(\\n\\t\\t\\t\\t\\t\\tstartingIndex - j,\\n\\t\\t\\t\\t\\t\\ti);\\n\\n\\t\\t\\t\\t\\tif (referenceText == textToEncode)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tpositionsBackFound = j;\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (positionsBackFound > 0)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tbestLengthFound = i;\\n\\n\\t\\t\\t\\t\\treferenceExpression += positionsBackFound;\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\t\\t\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn [bestLengthFound, referenceExpression]\\n\\t}\\n}\",\"filename\":\"/scripts/contractSolvers/LZCompressionContractSolver.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/contractSolvers/LZCompressionContractSolver.js\",\"url\":\"blob:file:///c963f078-bd42-4f45-8fe0-f6a20075ef32\",\"moduleSequenceNumber\":20438}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-280633-JoesGuns.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"MEDIA DEBUG SHIFT CACHE LOGIN\",1],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-225624-JoesGuns.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[22,191,152,140,79,175,25,34,174,27,85,53,24,44,78,129,80,11,187,10,110,141,89,58,71,83,188,105,131,34],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-162872-JoesGuns.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":591726476,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"74.2.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":51160302938.25,\"moneyMax\":191851136018.4375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1064,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-892705-JoesGuns.cct\",\"type\":\"Array Jumping Game II\",\"data\":[5,2,1,2,4,3,2,2,3,4,3,3,1,3,4,6,4,5,0,6,2,3],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-494126.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[104,62,11,126,92,11,45,60,38,104,2,42,114,17,100,125],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-121220-CyberSec.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9ZrS481qc301j361X623EZ6992w2482mO776kfqp5y4136BL245ZVOgl\",\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-187251-CyberSec.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"4AveA724Wpee5309541eep8316964pmDy621E227Urnl0gu953uiR482Ou\",\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"81.1.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":40260669854.25,\"moneyMax\":150977511953.4375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1131,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-116869-JoesGuns.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[9],[9,3],[7,6,6],[4,6,7,3],[2,6,9,3,7],[7,8,2,6,6,7],[2,8,8,7,5,2,1],[6,8,7,4,8,6,7,3],[2,9,5,4,3,9,7,5,7],[3,9,6,3,6,9,1,7,8,7]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"88.7.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":11306541359.25,\"moneyMax\":42399530097.1875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1056,\"serverGrowth\":78}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"47.4.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":25625783365.5,\"moneyMax\":96096687620.625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":983,\"serverGrowth\":74}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-901082.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1569595114\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"20.0.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":26555864387.25,\"moneyMax\":99584491452.1875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1243,\"serverGrowth\":84}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"9.3.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":13742011467.75,\"moneyMax\":51532543004.0625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1199,\"serverGrowth\":55}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-367451.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"532487941286\",-35],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-703773.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[180,197,55,117,148,13,193,169,19,89,4,88,192,161,198,184,98,56,184,190,8,164,116,154,125,108,77,59,44,188,112,88,158,146,33,165],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"76.9.9.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":12998078776.5,\"moneyMax\":48742795411.875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":918,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-135083-JoesGuns.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"649225\",2],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"10.3.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":11450220039.75,\"moneyMax\":42938325149.0625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":978,\"serverGrowth\":76}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-718369.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"7241806193\",34],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"99.0.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":21691576636.5,\"moneyMax\":81343412386.875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1009,\"serverGrowth\":98}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-209817-CyberSec.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())()(a(a\",\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-162265-JoesGuns.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"8xjYt652O632DO419ArGnF2lt4861V569Oj7UL5dZY1160IF0zG224ssok72533jKc\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-560823.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"2XL3220x851x820586OaBz2Y461e378UYiV33j2499BXHln2G6z096Dpy5APP003E1546\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"36.4.3.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1134264407.25,\"moneyMax\":4253491527.1875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1142,\"serverGrowth\":98}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"43.4.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1154,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-663168-JoesGuns.cct\",\"type\":\"Total Ways to Sum\",\"data\":91,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-426033.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[80,[1,2,4,5,6,7,8,9,11]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"90.4.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":819592674.75,\"moneyMax\":3073472530.3125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":936,\"serverGrowth\":89}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"8.9.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":611239357.5,\"moneyMax\":2292147590.625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":854,\"serverGrowth\":51}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-721673-JoesGuns.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"gEET444444AAaaaac00000000RRRRRRy7777777777777711KKP1n88888888f333333AuVVbb\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"60.3.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":479291130.75,\"moneyMax\":1797341740.3125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":931,\"serverGrowth\":69}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-983792-JoesGuns.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[3,2],[8,8,1],[9,4,5,4]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-314429.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[130,61,55,133,22,167,106,21,37,136,142,105,92,157]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"27.4.3.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":524168734.5,\"moneyMax\":1965632754.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":80}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-405828.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[110,[1,2,4,7,8,10,11,14,17,18]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"55.9.0.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":580461153.75,\"moneyMax\":2176729326.5625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":856,\"serverGrowth\":71}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-411658.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[102,[6,7,8,9,10,11,14,15,16,17,18]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"13.6.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":690002373.75,\"moneyMax\":2587508901.5625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":857,\"serverGrowth\":90}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"19.3.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":825178180.5,\"moneyMax\":3094418176.875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":844,\"serverGrowth\":83}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"14.3.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":632101532.25,\"moneyMax\":2370380745.9375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":873,\"serverGrowth\":63}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-170845-CyberSec.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,1,0,0,0],[0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0],[0,0,0,0,1,0,0,0],[1,0,0,0,1,0,1,0],[0,1,1,1,0,0,1,0],[1,0,0,0,0,0,0,0],[1,0,0,0,0,1,0,0]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"2.0.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":477232791,\"moneyMax\":1789622966.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":873,\"serverGrowth\":81}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"91.1.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":671971202.25,\"moneyMax\":2519892008.4375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":864,\"serverGrowth\":78}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-466909-Sector12.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[17,19,36,92,130,130,58,141,185,110,112,4,143,20,195,136,106,175],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-124898-JoesGuns.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"10100000000000000011010100110000\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"58.7.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":606515519.25,\"moneyMax\":2274433197.1875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":831,\"serverGrowth\":89}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-108312.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"POPUPFRAMESHELLENTERINBOX\",\"SNAPSHOT\"],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"34.9.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":815408020.5,\"moneyMax\":3057780076.875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":888,\"serverGrowth\":60}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"72.2.2.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"icarus\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":696281974.5,\"moneyMax\":2611057404.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":946,\"serverGrowth\":70}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-377972-CyberSec.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"w7777777777k2A5FQFQFQFQ5FQF1EF1EF1EZ6uw3GN3f8OwZX3wZX3wuX3Tw2Yr5kVcT2Yr5kVcr\",\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"8.4.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":759259623.75,\"moneyMax\":2847223589.0625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":74}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"85.4.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":654114765.75,\"moneyMax\":2452930371.5625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":847,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-383909.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"1f118y5IWNYbP431N9886Y4NTeh5580479Y27nKDjrg04J3de723Uje43048\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"38.9.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":669207319.5,\"moneyMax\":2509527448.125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":834,\"serverGrowth\":70}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-862187-Sector12.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"2113243104\",\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"88.2.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1090362294.75,\"moneyMax\":4088858605.3125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":806,\"serverGrowth\":51}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-392495.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a)()(a)())()aaa\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-680767.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"35229192128\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"24.7.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1156552104,\"moneyMax\":4337070390,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":802,\"serverGrowth\":81}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-163412.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":688413653,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"98.3.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":840086897.25,\"moneyMax\":3150325864.6875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":820,\"serverGrowth\":75}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"52.3.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1101197775.75,\"moneyMax\":4129491659.0625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":808,\"serverGrowth\":71}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-835703-CyberSec.cct\",\"type\":\"Array Jumping Game II\",\"data\":[3,4,1,4,5,4,1,6,5,4,2,1,5,2,0,2,4,4,3,5,2],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-662272-CyberSec.cct\",\"type\":\"Array Jumping Game\",\"data\":[2,9,2,1,8,7,6,10],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"29.4.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":814182508.5,\"moneyMax\":3053184406.875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":803,\"serverGrowth\":77}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-771137-JoesGuns.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,1,4,7,4,2,3,3,5,6,1,3,2,2,4,2,4,2,1],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-264124-JoesGuns.cct\",\"type\":\"Array Jumping Game\",\"data\":[1,8,10,7,0,9,0],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"64.4.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":536283157.5,\"moneyMax\":2011061840.625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":651,\"serverGrowth\":64}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-512969.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[200,26,159,99,151,62,148,115,134,31,168,143,28,122,98,151,94,186,13,164,129,104,170,15,126,132,147,66,124],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"49.1.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":466758534.75,\"moneyMax\":1750344505.3125,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":513,\"serverGrowth\":54}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"66.1.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":495081876,\"moneyMax\":1856557035,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":572,\"serverGrowth\":52}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-473417-Sector12.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"241007254\",\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-786657.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"00100011\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"6.6.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":224777048.25,\"moneyMax\":842913930.9375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":401,\"serverGrowth\":35}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"11.5.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":157422144,\"moneyMax\":590333040,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":399,\"serverGrowth\":37}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-594965.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[193,56,31,168,29,102,95,38,112,124,179],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-171278-Sector12.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"4fKSR822526107966XAHO65409606107828J871J356N3kXL079\",\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-3079.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":1718270133214866,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"97.8.9.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":688778651.25,\"moneyMax\":2582919942.1875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":739,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-756092-CyberSec.cct\",\"type\":\"Total Ways to Sum\",\"data\":72,\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-441118.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[3,6],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-570840-JoesGuns.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":32,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-792704.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"ddfit111111zzzzzAA33ccccccccccccccYYYYYYHHHDDDDzwwwwwwwwwwww0XX\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-828188.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a(((a)()())(a))())(\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"45.7.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":240868185,\"moneyMax\":903255693.75,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":462,\"serverGrowth\":46}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"91.9.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":350561469.75,\"moneyMax\":1314605511.5625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":608,\"serverGrowth\":66}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-234501.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"PRINT DEBUG MEDIA FLASH CLOUD\",5],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"41.9.2.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":309281160.75,\"moneyMax\":1159804352.8125,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":400,\"serverGrowth\":49}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"87.1.2.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"zb-institute\",\"summit-uni\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":119018281.5,\"moneyMax\":446318555.625,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":296,\"serverGrowth\":51}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-325121.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,0,0,0,0],[1,0,0,0,0,0,0,1,0,0,1],[0,0,0,0,0,0,0,0,0,1,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"66.3.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":169842660,\"moneyMax\":636909975,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":343,\"serverGrowth\":54}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-586408.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[66,90,92,137,138,23,157,40,122],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-743662.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[9,[[2,4],[5,8],[0,1],[0,8],[0,2],[6,7],[3,4],[5,8],[7,8],[0,3]]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"63.4.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":206250000,\"moneyMax\":773437500,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":382,\"serverGrowth\":72}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-502595.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":345564750,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-318168-JoesGuns.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"))((((())a((())\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"14.2.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":38,\"minDifficulty\":13,\"moneyAvailable\":53038580.25,\"moneyMax\":198894675.9375,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":293,\"serverGrowth\":49}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-93716.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0],[0,0,1,0,0,0],[1,0,0,1,0,0],[0,0,0,0,1,0],[0,1,0,0,1,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"55.0.2.1\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.grow(targetServerName);\\n}\",\"filename\":\"/scripts/export/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/grow.js\",\"url\":\"blob:file:///bde895c0-33a1-4418-9748-7a8b6677313e\",\"moduleSequenceNumber\":384}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.weaken(targetServerName);\\n}\",\"filename\":\"/scripts/export/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/weaken.js\",\"url\":\"blob:file:///9f959f8f-94f0-4224-8473-ef4d7ec0728e\",\"moduleSequenceNumber\":145}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":145,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.hack(targetServerName);\\n}\",\"filename\":\"/scripts/export/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/hack.js\",\"url\":\"blob:file:///ea32b36b-45fe-4592-839d-875428d8dcb1\",\"moduleSequenceNumber\":296}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.3460000000000003,\"minDifficulty\":1,\"moneyAvailable\":163623,\"moneyMax\":196875,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-700608.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[13,7],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-349202-JoesGuns.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0],[0,0,0,1],[0,0,0,0]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-415077-JoesGuns.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,9],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"76.7.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":12.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"/scripts/export/weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.210000000000004,\"pid\":165,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":7,\"dependencies\":[{\"filename\":\"/scripts/export/weaken.js\",\"url\":\"blob:file:///4a4a77c1-250b-4290-9488-b780d0e7dcf1\",\"moduleSequenceNumber\":146}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.grow(targetServerName);\\n}\",\"filename\":\"/scripts/export/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/grow.js\",\"url\":\"blob:file:///1439045c-0a64-432b-acee-d16b545b16f1\",\"moduleSequenceNumber\":387}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.weaken(targetServerName);\\n}\",\"filename\":\"/scripts/export/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/weaken.js\",\"url\":\"blob:file:///4a4a77c1-250b-4290-9488-b780d0e7dcf1\",\"moduleSequenceNumber\":146}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.hack(targetServerName);\\n}\",\"filename\":\"/scripts/export/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/hack.js\",\"url\":\"blob:file:///be859de2-62fc-4406-a6f8-83a2a4f5da3d\",\"moduleSequenceNumber\":299}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":2523173.8833095687,\"moneyMax\":5625000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-437946.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(((aa)\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"58.2.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.weaken(targetServerName);\\n}\",\"filename\":\"/scripts/export/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/weaken.js\",\"url\":\"blob:file:///1cd89ff3-6213-4d3a-93e9-e991b9aace0c\",\"moduleSequenceNumber\":220}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":220,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.grow(targetServerName);\\n}\",\"filename\":\"/scripts/export/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/grow.js\",\"url\":\"blob:file:///efc81bbe-7dab-435e-8a16-65b1d96a31c7\",\"moduleSequenceNumber\":388}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.hack(targetServerName);\\n}\",\"filename\":\"/scripts/export/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/hack.js\",\"url\":\"blob:file:///8ef6969f-d589-4b5d-b58d-6569f7d2d24c\",\"moduleSequenceNumber\":300}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":1725000,\"moneyMax\":6468750,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-979599-JoesGuns.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())a(()()a)()a\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"95.5.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.weaken(targetServerName);\\n}\",\"filename\":\"/scripts/export/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/weaken.js\",\"url\":\"blob:file:///3289ebc0-69c0-4f09-bf95-62082ca30766\",\"moduleSequenceNumber\":221}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":221,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.grow(targetServerName);\\n}\",\"filename\":\"/scripts/export/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/grow.js\",\"url\":\"blob:file:///c3382d9b-3caa-47a1-a267-e8d45931f8bd\",\"moduleSequenceNumber\":389}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.hack(targetServerName);\\n}\",\"filename\":\"/scripts/export/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/hack.js\",\"url\":\"blob:file:///d163e0f2-d471-4b53-afe0-e3bb82d4af42\",\"moduleSequenceNumber\":301}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1875000,\"moneyMax\":7031250,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-722755.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[28,196,18,146,164,106,136,68,28,74,113,29,153,198,100,166,54,55,167,194,173,152,166,76,115,83,11,71,102]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"55.1.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.grow(targetServerName);\\n}\",\"filename\":\"/scripts/export/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/grow.js\",\"url\":\"blob:file:///c8e8c407-5e3d-40ff-aa9a-debce6671456\",\"moduleSequenceNumber\":391}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.hack(targetServerName);\\n}\",\"filename\":\"/scripts/export/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/hack.js\",\"url\":\"blob:file:///f4cdc27a-f05d-447c-ac52-4c81fb029095\",\"moduleSequenceNumber\":303}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5625000,\"moneyMax\":21093750,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"5.8.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.grow(targetServerName);\\n}\",\"filename\":\"/scripts/export/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/grow.js\",\"url\":\"blob:file:///e8c9f52e-d9fd-49b9-988a-8714c847aa85\",\"moduleSequenceNumber\":385}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.weaken(targetServerName);\\n}\",\"filename\":\"/scripts/export/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/weaken.js\",\"url\":\"blob:file:///b94b6f05-7910-461e-a178-c019c2c6fc65\",\"moduleSequenceNumber\":147}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.hack(targetServerName);\\n}\",\"filename\":\"/scripts/export/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/hack.js\",\"url\":\"blob:file:///11907fc0-55b2-4f79-935a-73674827a277\",\"moduleSequenceNumber\":297}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2062500,\"moneyMax\":7734375,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"27.3.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.grow(targetServerName);\\n}\",\"filename\":\"/scripts/export/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/grow.js\",\"url\":\"blob:file:///aefa66f6-f82a-4edf-8cf0-203ca0a764d2\",\"moduleSequenceNumber\":393}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.hack(targetServerName);\\n}\",\"filename\":\"/scripts/export/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/hack.js\",\"url\":\"blob:file:///dc3c6409-cead-4319-95a5-633b09b2abdf\",\"moduleSequenceNumber\":305}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"computek\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":3750000,\"moneyMax\":14062500,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"69.2.1.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":33750000,\"moneyMax\":126562500,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"83.7.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.grow(targetServerName);\\n}\",\"filename\":\"/scripts/export/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/grow.js\",\"url\":\"blob:file:///ba60738a-e13e-41b2-81f6-906c56232b72\",\"moduleSequenceNumber\":390}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.hack(targetServerName);\\n}\",\"filename\":\"/scripts/export/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/hack.js\",\"url\":\"blob:file:///599efb89-1cfd-4b6c-b2dc-7bae4cc1cc18\",\"moduleSequenceNumber\":302}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2250000,\"moneyMax\":8437500,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"36.9.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.grow(targetServerName);\\n}\",\"filename\":\"/scripts/export/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/grow.js\",\"url\":\"blob:file:///e4f2a1a7-20fd-4ec2-807a-49431b1d9b8b\",\"moduleSequenceNumber\":394}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.hack(targetServerName);\\n}\",\"filename\":\"/scripts/export/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/hack.js\",\"url\":\"blob:file:///d0b0554c-42d9-456a-b241-513aa42fb5e6\",\"moduleSequenceNumber\":306}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":11250000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-863556-CyberSec.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,-10,-7,9,3,8,3,9,-5,10,-10,-10,1,-4,-4,-2,-4,-7,-1,-5,-3,-9,1,7,0,8,4,-2,8,-7,-7,1,9,3,6,9],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"78.5.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":18000000,\"moneyMax\":67500000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-558504.cct\",\"type\":\"Total Ways to Sum\",\"data\":59,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"78.5.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.grow(targetServerName);\\n}\",\"filename\":\"/scripts/export/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/grow.js\",\"url\":\"blob:file:///a8eb8519-4dc0-4519-8272-f14169a0a0a9\",\"moduleSequenceNumber\":392}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.hack(targetServerName);\\n}\",\"filename\":\"/scripts/export/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/hack.js\",\"url\":\"blob:file:///84c6ad06-eedc-4a75-9ac8-9b8fadf4ba96\",\"moduleSequenceNumber\":304}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":7500000,\"moneyMax\":28125000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-797368-Sector12.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[6,6],[9,2,7],[3,9,9,4],[8,1,4,6,6],[5,4,5,3,1,7]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-682299-JoesGuns.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"ARRAYLOGINCACHEQUEUETABLE\",\"COMPUTER\"],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-598831.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-3,9,8,-7,10,-7,-2,6,6,9,-8,-4,0,3,-5,-8,-7,1,-4,-1],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"93.9.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":33,\"hackDifficulty\":33,\"minDifficulty\":11,\"moneyAvailable\":46932197.25,\"moneyMax\":175995739.6875,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":182,\"serverGrowth\":38}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-658226-JoesGuns.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[40,26],[7,24],[31,33],[20,10],[23,9],[50,6],[48,29],[37,21],[48,12],[45,37],[4,39],[45,3],[39,30]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-61133-JoesGuns.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":600931166,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-472169-CyberSec.cct\",\"type\":\"Total Ways to Sum\",\"data\":42,\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"27.6.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":31099615.5,\"moneyMax\":116623558.125,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":255,\"serverGrowth\":30}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-292523-JoesGuns.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,-8,6,-6,6,3,-9,10,7,-2,10,-8,10,10,-4,-4,3,-9,-6,-1,1,-1],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-863093.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[183,126,39,34,148,112,184,195,197],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-402638.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"LOGIC ARRAY MODEM LINUX CACHE\",9],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"48.2.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.grow(targetServerName);\\n}\",\"filename\":\"/scripts/export/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/grow.js\",\"url\":\"blob:file:///2c62b899-736f-45e3-99bd-58852b6575dc\",\"moduleSequenceNumber\":395}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.hack(targetServerName);\\n}\",\"filename\":\"/scripts/export/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/hack.js\",\"url\":\"blob:file:///0f650bbf-e4af-461d-9518-ed4e85ec9152\",\"moduleSequenceNumber\":309}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":15000000,\"moneyMax\":56250000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-604921-JoesGuns.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"77AAAAAAAAAAA22hhhhhhhttxhoo33FFFFFFF00ggdduuooollzzZkkkkk111lTTdd\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"43.0.1.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":187500000,\"moneyMax\":703125000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":521,\"serverGrowth\":33}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-838632.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"94t3FXEM1v09LSVBQ76IK01u8406276uXY2jg779rKFMV5dL66794bufKbi3W063HqJnS417DLVwYbR\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"35.5.1.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":993,\"serverGrowth\":50}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-674377-JoesGuns.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"MEDIALINUXARRAYMACROVIRUS\",\"TERMINAL\"],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-41259-JoesGuns.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"FLASH MACRO VIRUS SHIFT ARRAY\",6],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"23.4.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":337500000,\"moneyMax\":1265625000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":730,\"serverGrowth\":44}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-893240.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,13],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-75172-JoesGuns.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,2,0,10,0,4,1,0,3,5,0,0,0,6,5,6,2,0,0,2,9],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"72.3.0.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":508,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-688071.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"WFmkYUhyA6QShh0h0h0h0hc0h0hh0771ayO826MO826MO826r6MO826r6MedvxzCm3KKy4mzCm3KKDrWQJ86ZQJ86Z\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-886620.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9x0pppplue1296KE6EtAZH972Xd877qsbm23x244sKsK\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-433401.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"CL88A2yWzk88A2yWzkYdnvrEdFYdnvrEdFFFFFQFFFQFFQFiY3Muogv3s2aK5gv3s2XBr6r6r6r6D\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"56.6.3.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":351,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-582169-CyberSec.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"133003821\",84],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"46.3.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":203,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"33.8.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":548,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"24.7.9.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.grow(targetServerName);\\n}\",\"filename\":\"/scripts/export/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/grow.js\",\"url\":\"blob:file:///73b577b6-6111-4db2-84bf-eedcdaeb73ba\",\"moduleSequenceNumber\":386}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.weaken(targetServerName);\\n}\",\"filename\":\"/scripts/export/weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/weaken.js\",\"url\":\"blob:file:///44dd0145-8cf0-49e9-8b2b-3ed20d65425a\",\"moduleSequenceNumber\":148}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns)\\n{\\n\\tvar targetServerName = ns.args[0];\\n\\n\\tawait ns.hack(targetServerName);\\n}\",\"filename\":\"/scripts/export/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/export/hack.js\",\"url\":\"blob:file:///ff7ef4ef-172f-4658-801b-3b7bfc26d5eb\",\"moduleSequenceNumber\":298}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":59,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"42.5.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"67.5.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":9000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"5.9.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1.291080533333338,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":9854.612767999928}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":104579.87275963547}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":9761.933514666593}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{\"buyServer\":\"run /scripts/buyServer.js\",\"analyze-psp\":\"run /scripts/services/ServerAnalyzerService.js all psp\",\"analyze-tgt\":\"run /scripts/services/ServerAnalyzerService.js all tgt\",\"analyze-res\":\"run /scripts/services/ServerAnalyzerService.js all res\",\"searchContracts\":\"run /scripts/searchContracts.js\",\"deploy\":\"run /scripts/managers/DeploymentManager.js\",\"managers\":\"ls /scripts/managers\",\"controllers\":\"ls /scripts/controllers\",\"hackServer\":\"run /scripts/managers/HackingManager.js\",\"upgradeServer\":\"run /scripts/upgradeServer.js\",\"services\":\"ls /scripts/services\",\"karma\":\"run /scripts/karma.js\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"30","AllGangsSave":"","LastExportBonus":"1679269972049","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"storedCycles\":0}}"}}